@page "/dutymanager"
@attribute [Authorize(Roles = "pku_admins, admin")]

@using PetrpkuWeb.Client.Extensions

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IMatToaster Toaster

<h2 class="col-12 mb-4 text-center">График дежурства руководящего состава ППКУ на @title.ToString("MMMM yyyy").ToLower() г.</h2>
<div class="alert alert-danger" role="alert">
    В печатную форму попадают следующие поля: фамилия, имя, отчество, должность, моб.телефон
</div>
<div class="row mb-2">
    <div class="col-9 border-right">
        @if (ListOfDuty != null)
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">
                            <MatTooltip Tooltip="Сортировать по дате" TargetId="SpanTooltip">
                                <span id="SpanTooltip" @onclick="@(() => SortTable("DayOfDuty"))">Дата</span>
                                <MatIcon Icon="@(GetSortStyle("DayOfDuty"))" />
                            </MatTooltip>
                        </th>
                        <th scope="col"></th>
                        <th scope="col">Должность</th>
                        <th scope="col">Ф.И.О.</th>
                        <th scope="col">Телефон</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                @foreach (var dutyUser in ListOfDuty)
                {
                    <tr>
                        <th scope="row">@dutyUser.DayOfDuty.Day</th>
                        <td>@dutyUser.AssignedTo.DisplayName</td>
                        <td>@dutyUser.AssignedTo.WorkingPosition</td>
                        <td>@dutyUser.AssignedTo.LastName @dutyUser.AssignedTo.FirstName @dutyUser.AssignedTo.MidleName</td>
                        <td>@dutyUser.AssignedTo.MobPhone</td>
                        <td><MatButton Outlined="true" Icon="delete_forever" OnClick="@(() => RemoveDutyUser(dutyUser))" Label="Удалить" /></td>
                    </tr>
                }
            </table>
        }
        <div class="col-12 md-2">
            <MatButton Raised="true" Icon="save_alt" OnClick="@(() => DownloadFile(PikDate.Value.Month, PikDate.Value.Year))" Label="Скачать" />
        </div>
    </div>
    <div class="col-3">
        <div class="row mb-2">
            <div class="col-12">
                <MatDatePicker Label="Выберете месяц" Outlined="true" @bind-Value="PikDate" DateFormat="d-m-Y" />
            </div>
        </div>
        <div class="row mb-4 border-bottom">
            <div class="col-12 mb-4">
                <MatButton Raised="true" Icon="calendar_today" OnClick="@(() => GetCalendarAsync(PikDate.Value.Month, PikDate.Value.Year))" Label="Применить" />
            </div>
        </div>
        <div class="row">
            <EditForm Model="@DutyVM" OnValidSubmit="@AddDuty" OnInvalidSubmit="@(() => Toaster.Add("Выберете дату и назначте на эту дату дежурного",MatToastType.Danger,"Ошибка!"))">
                <div class="col-12">
                    <DataAnnotationsValidator />
                </div>
                <div class="col-12 mb-2">
                    <MatSelect Label="Дата" @bind-Value="DutyVM.Day" Outlined="true">
                        @if (ListOfDays == null)
                        {
                            <MatOption Value="">(loading...)</MatOption>
                        }
                        else
                        {
                            <MatOption Value="-1" Disabled="true" />
                            @foreach (var day in ListOfDays)
                            {
                                <MatOption Value="@day.Day.ToString()">@day.Day</MatOption>
                            }
                        }
                    </MatSelect>
                    <ValidationMessage For="() => DutyVM.Day" />
                </div>
                <div class="col-12 mb-2">
                    <MatSelect Label="Дежурный" @bind-Value="DutyVM.User" Outlined="true">
                        @if (users == null)
                        {
                            <MatOption Value="">(loading...)</MatOption>
                        }
                        else
                        {
                            <MatOption Value="-1" Disabled="true" />
                            @foreach (var user in users)
                            {
                                <MatOption Value="@user.AppUserId.ToString()">@user.DisplayName - @user.WorkingPosition</MatOption>
                            }
                        }
                    </MatSelect>
                    <ValidationMessage For="() => DutyVM.User" />
                </div>
                <div class="col-12 mb-2">
                    <MatButton Raised="true" Icon="add" Type="submit" Label="Добавить" />
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {

    public DateTime? PikDate { get; set; } = DateTime.Now;

    private List<Duty> ListOfDuty { get; set; } = new List<Duty>();
    private DutyViewModel DutyVM { get; set; } = new DutyViewModel();
    private List<DateTime> ListOfDays { get; set; }

    List<AppUser> users;
    DateTime title = DateTime.Now;

    bool isSortedAscending;
    string currentSortColumn;


    protected async override Task OnInitializedAsync()
    {
        var year = PikDate.Value.Year;
        var month = PikDate.Value.Month;

        await GetCalendarAsync(month, year);

        users = await HttpClient.GetJsonAsync<List<AppUser>>("api/users/duty/active");
    }

    async Task GetCalendarAsync(int month, int year)
    {
        ListOfDuty = null;
        ListOfDuty = await HttpClient.GetJsonAsync<List<Duty>>($"api/duty/month/{month}/{year}");

        ListOfDays = Enumerable.Range(1, DateTime.DaysInMonth(year, month)).Select(day => new DateTime(year, month, day))
            .ToList();

        ListOfDays.RemoveAll(r => ListOfDuty.Exists(d => d.DayOfDuty.Day == r.Day));
        title = PikDate.Value;
    }

    async Task RemoveDutyUser(Duty dutyUser)
    {
        if (dutyUser.DutyId > 0)
        {
            var deleteDutyUser = ListOfDuty.Where(u => u.DutyId == dutyUser.DutyId).FirstOrDefault();
            await HttpClient.DeleteAsync($"api/duty/delete/{deleteDutyUser.DutyId}");
            ListOfDuty.Remove(dutyUser);
            ListOfDays.Add(dutyUser.DayOfDuty);
            Toaster.Add($"{deleteDutyUser.AssignedTo.DisplayName} снят с дежурства на {deleteDutyUser.DayOfDuty.ToShortDateString()}", MatToastType.Danger, "Внимание!");
        }
    }

    async Task AddDuty()
    {
        var year = PikDate.Value.Year;
        var month = PikDate.Value.Month;
        var day = Int32.Parse(DutyVM.Day);
        var user = Int32.Parse(DutyVM.User);
        var date = new DateTime(year, month, day);
        var findUser = users.Where(u => u.AppUserId == user).FirstOrDefault();

        var duty = new Duty()
        {
            DayOfDuty = date,
            AppUserId = findUser.AppUserId
        };

        ListOfDuty.Add(
            new Duty
            {
                DayOfDuty = date,
                AssignedTo = findUser
            });

        ListOfDays.Remove(duty.DayOfDuty);

        var response = await HttpClient.PostJsonAsync<Duty>("api/duty/create", duty);
        Toaster.Add($"{response.AssignedTo.DisplayName} назначен дежурным на {response.DayOfDuty.ToShortDateString()}", MatToastType.Success, "Успех!");
        DutyVM = new DutyViewModel();
    }

    async Task DownloadFile(int month, int year)
    {
        var file = await HttpClient.GetByteArrayAsync($"api/duty/getfile/{month}/{year}");

        await JSRuntime.SaveAs($"Дежурные_на_{month}-{year}_{DateTime.Now.ToString("HH-mm-ss")}.docx", file);
    }

    #region Sort tabe methods
    void SortTable(string columnName)
    {
        if (ListOfDuty.Any())
        {

            if (columnName != currentSortColumn)
            {
                //We need to force order by descending on the new column
                ListOfDuty = ListOfDuty.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
                currentSortColumn = columnName;
                isSortedAscending = true;

            }
            if (isSortedAscending)
            {
                ListOfDuty = ListOfDuty.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                ListOfDuty = ListOfDuty.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }
    }

    string GetSortStyle(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            return "sort";
        }
        if (isSortedAscending)
        {
            return "keyboard_arrow_up";
        }
        else
        {
            return "keyboard_arrow_down";
        }
    }

    #endregion

}
