@page "/accountmanager"

@attribute [Authorize(Roles = AuthRole.ADMIN)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject IMatToaster Toaster


<h2 class="col-12 mb-4 text-center">Пользователи</h2>

<div class="row mb-5">
    <MatButton Outlined="true" Icon="add" OnClick="@(e => { newUserDialogIsOpen = true; })" Label="Добавить пользователя" />
</div>
<div class="row">
    <div class="col-6">
        <h2 class="text-center">Активные учетные записи</h2>
        @if (usersIdentity is null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (usersIdentity.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">No users...</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Логин</th>
                        <th scope="col">Ф.И.О.</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in usersIdentity)
                    {
                        <tr @key="user">
                            <td>@user.AppUserId</td>
                            <td>@user.UserName</td>
                            <td>@user.DisplayName</td>
                            <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenEditUserDialog(user))" Label="Удалить" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-6">
        <h2 class="text-center">Архивные учетные записи</h2>
        @if (disabledUsers is null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (disabledUsers.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">No users...</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="table-danger">
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Ф.И.О.</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in disabledUsers)
                    {

                        <tr @key="user">
                            <td>@user.AppUserId</td>
                            <td>@user.DisplayName</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<EditForm Model="@LdapUser">
    <MatDialog @bind-IsOpen="@newUserDialogIsOpen">
        <MatDialogTitle>Новый пользователь</MatDialogTitle>
        <MatDialogContent>
            <MatSelect @bind-Value="@LdapUser.UserName" Outlined="true">
                @if (ldapUsers is null)
                {
                    <MatOption Value="">(loading...)</MatOption>
                }
                else
                {
                    <MatOption Value="-1" Disabled="true" >Выберите пользователя...</MatOption>
                    @foreach (var user in ldapUsers)
                    {
                        <MatOption Value="@user.UserName">@user.DisplayName</MatOption>
                    }
                }
            </MatSelect>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newUserDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@AddAccount" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@if (appUser is { })
{
    <EditForm Model="@appUser">
        <MatDialog @bind-IsOpen="@editUserDialogIsOpen">
            <MatDialogTitle>Удалить пользователя @appUser.DisplayName ?</MatDialogTitle>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@(e => { editUserDialogIsOpen = false; })" Label="Отмена" />
                <MatButton Icon="delete_forever" Type="submit" OnClick="@Delete" Label="Да" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

@code {

    private LdapUser LdapUser { get; set; } = new LdapUser();
    
    List<LdapUser> ldapUsers;
    List<AppUserIdentity> usersIdentity;
    AppUserIdentity appUser;
    List<AppUser> disabledUsers;

    bool editUserDialogIsOpen = false;
    bool newUserDialogIsOpen = false;

    protected async override Task OnInitializedAsync()
    {
        disabledUsers = await HttpClient.GetJsonAsync<List<AppUser>>("api/users/all/disabled");
        usersIdentity = await HttpClient.GetJsonAsync<List<AppUserIdentity>>("api/account/identity/all");
        ldapUsers = await HttpClient.GetJsonAsync<List<LdapUser>>("api/account/ldap/all");
    }

    async Task AddAccount()
    {
        newUserDialogIsOpen = false;

        var newUser = ldapUsers.FirstOrDefault(u => u.UserName == LdapUser.UserName);

        // Remove from dropdown list of LdapUsers collection
        ldapUsers.Remove(newUser);

        var jsonContent = JsonConvert.SerializeObject(newUser);
        var buffer = System.Text.Encoding.UTF8.GetBytes(jsonContent);
        var byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        var response = await HttpClient.PostAsync("api/account/identity/add", byteContent);
        var content = await response.Content.ReadAsStringAsync();

        //Add to UsersIdentity collection
        usersIdentity.Add(JsonConvert.DeserializeObject<AppUserIdentity>(content));
        Toaster.Add($"Пользователь успешно добавлен в систему", MatToastType.Success, "Успех!");
        
        LdapUser = new LdapUser();
    }

    void OpenEditUserDialog(AppUserIdentity currentAppUser)
    {
        editUserDialogIsOpen = true;
        appUser = currentAppUser;
    //user = usersIdentity.FirstOrDefault(ui => ui.UserName == appUser);
    }

    async Task Delete()
    {
        editUserDialogIsOpen = false;
        
        // Add to dropdown list of LdapUsers collection
        var addLdapUser = await HttpClient.GetJsonAsync<LdapUser>($"api/account/search/{appUser.UserName}");;
        ldapUsers.Add(addLdapUser);

        // Remove from UsersIdentity collection
        usersIdentity.Remove(appUser);

        //Add to DisabledUsers collection
        var response = await HttpClient.DeleteAsync($"api/account/identity/delete/{appUser.UserName}");
        var content = await response.Content.ReadAsStringAsync();
        disabledUsers.Add(JsonConvert.DeserializeObject<AppUser>(content));
        Toaster.Add($"Пользователь удален", MatToastType.Warning, "Внимание!");
    }

}