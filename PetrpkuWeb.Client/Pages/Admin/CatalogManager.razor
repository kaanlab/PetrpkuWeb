@page "/catalog"

@attribute [Authorize(Roles = AuthRole.ADMIN)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject IMatToaster Toaster


<h2 class="col-12 mb-4 text-center">Справочники</h2>

<div class="row md-2">
    <div class="col-4">
        <MatButton Outlined="true" Icon="add" OnClick="@(e => { newDepartmentDialogIsOpen = true; })" Label="Добавить подразделение" />
    </div>
    <div class="col-4">
        <MatButton Outlined="true" Icon="add" OnClick="@(e => { newBuildingDialogIsOpen = true; })" Label="Добавить здание" />
    </div>
    <div class="col-2">
        <MatButton Outlined="true" Icon="add" OnClick="@(e => { newSiteSectionDialogIsOpen = true; })" Label="Добавить раздел сайта" />
    </div>
    <div class="col-2">
        <MatButton Outlined="true" Icon="add" OnClick="@(e => { newSiteSubSectionDialogIsOpen = true; })" Label="Добавить подраздел сайта" />
    </div>
</div>
<div class="row">
    <div class="col-4">
        <h2 class="text-center">Список подразделений</h2>
        @if (departments is null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (departments.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">Список пуст</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Название</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var department in departments)
                    {
                        @if (!department.IsVisible)
                        {
                            TrCssClass = "table-danger";
                        }
                        else
                        {
                            TrCssClass = null;
                        }

                        <tr @key="department" class="@TrCssClass">
                            <td>@department.Name</td>
                            <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenEditDepartmentDialog(department))" Label="Редактировать" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-4">
        <h2 class="text-center">Список зданий</h2>
        @if (buildings is null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (buildings.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">Список пуст</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Название</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var building in buildings)
                    {
                        <tr @key="building">
                            <td>@building.Name</td>
                            <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenEditBuildingDialog(building))" Label="Редактировать" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-4">
        <h2 class="text-center">Разделы официального сайта</h2>
        @if (siteSections is null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (siteSections.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">Список пуст</p>
                </div>
            </div>
        }
        else
        {
            <ul class="list-group">
                @foreach (var siteSection in siteSections)
                {
                    <li class="list-group-item">@siteSection.Name</li>
                    @if (siteSection.SiteSubsections.Any())
                    {
                        @foreach (var siteSubSection in siteSection.SiteSubsections)
                        {
                            <li class="list-group-item">@siteSubSection.Title</li>
                        }
                    }
                }
            </ul>
        }
    </div>
</div>

<EditForm Model="@NewDepartment">
    <MatDialog @bind-IsOpen="@newDepartmentDialogIsOpen">
        <MatDialogTitle>Новое подразделение</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Подразделение" @bind-Value="@NewDepartment.Name"></MatTextField>
            <label>Отображать в меню</label>
            <MatSlideToggle @bind-Checked="@NewDepartment.IsVisible"></MatSlideToggle>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newDepartmentDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@AddNewDepartment" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@if (currentDepartment is { })
{
    <EditForm Model="@currentDepartment">
        <MatDialog @bind-IsOpen="@editDepartmentDialogIsOpen">
            <MatDialogTitle>Редактировать подразделение</MatDialogTitle>
            <MatDialogContent>
                <MatTextField Label="Подразделение" @bind-Value="@DepatrmentName"></MatTextField>
                <label>Отображать в меню</label>
                <MatSlideToggle @bind-Checked="@currentDepartment.IsVisible"></MatSlideToggle>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@CancelUpdateDepartment" Label="Отмена" />
                <MatButton Icon="" Type="submit" OnClick="@(() => UpdateDepartment())" Label="Обновить" />
                <MatButton Icon="delete_forever" OnClick="@(() => DeleteDepartment())" Label="Удалить" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

<EditForm Model="@NewBuilding">
    <MatDialog @bind-IsOpen="@newBuildingDialogIsOpen">
        <MatDialogTitle>Новое здание</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Подразделение" @bind-Value="@NewBuilding.Name"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newBuildingDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@AddNewBuilding" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@if (currentBuilding is { })
{
    <EditForm Model="@currentBuilding">
        <MatDialog @bind-IsOpen="@editBuildingDialogIsOpen">
            <MatDialogTitle>Редактировать здание</MatDialogTitle>
            <MatDialogContent>
                <MatTextField Label="Название" @bind-Value="@BuildingName"></MatTextField>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@CancelUpdateBuilding" Label="Отмена" />
                <MatButton Icon="" Type="submit" OnClick="@(() => UpdateBuilding())" Label="Обновить" />
                <MatButton Icon="delete_forever" OnClick="@(() => DeleteBuilding())" Label="Удалить" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

<EditForm Model="@NewSiteSection">
    <MatDialog @bind-IsOpen="@newSiteSectionDialogIsOpen">
        <MatDialogTitle>Новый раздел сайта</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Название" @bind-Value="@NewSiteSection.Name"></MatTextField>            
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newSiteSectionDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@AddNewSiteSection" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

<EditForm Model="@NewSiteSubSection">
    <MatDialog @bind-IsOpen="@newSiteSubSectionDialogIsOpen">
        <MatDialogTitle>Новый подраздел сайта</MatDialogTitle>
        <MatDialogContent>
            <label>Раздел сайта</label>
            <select class="custom-select" @bind="@NewSiteSubSection.SiteSectionId">
                @if (siteSections is null)
                {
                    <option selected>(loading...)</option>
                }
                else
                {
                    <option selected>--- Выберите раздел сайта ---</option>
                    @foreach (var siteSection in siteSections)
                    {
                        <option value="@siteSection.SiteSectionId">@siteSection.Name</option>
                    }
                }
            </select>
            <MatTextField Label="Название" @bind-Value="@NewSiteSection.Name"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newSiteSubSectionDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@AddNewSiteSubSection" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@code {

    Department NewDepartment { get; set; } = new Department();
    Building NewBuilding { get; set; } = new Building();
    SiteSection NewSiteSection { get; set; } = new SiteSection();
    SiteSubsection NewSiteSubSection { get; set; } = new SiteSubsection();

    Department currentDepartment;
    List<Department> departments;
    List<Building> buildings;
    List<SiteSection> siteSections;

    string TrCssClass;

    private string _departmentName;
    public string DepatrmentName
    {
        get => _departmentName;
        set
        {
            _departmentName = value;
            this.StateHasChanged();
        }
    }

    Building currentBuilding;

    private string _buildingName;
    public string BuildingName
    {
        get => _buildingName;
        set
        {
            _buildingName = value;
            this.StateHasChanged();
        }
    }

    bool newDepartmentDialogIsOpen = false;
    bool newBuildingDialogIsOpen = false;
    bool newSiteSectionDialogIsOpen = false;
    bool newSiteSubSectionDialogIsOpen = false;

    bool editDepartmentDialogIsOpen = false;
    bool editBuildingDialogIsOpen = false;
    bool editSiteSectionDialogIsOpen = false;
    bool editSiteSubSectionDialogIsOpen = false;


    protected async override Task OnInitializedAsync()
    {
        departments = await HttpClient.GetJsonAsync<List<Department>>("api/departments/all");
        buildings = await HttpClient.GetJsonAsync<List<Building>>("api/buildings/all");
        siteSections = await HttpClient.GetJsonAsync<List<SiteSection>>("api/sections/all");
    }

    async Task AddNewDepartment()
    {
        newDepartmentDialogIsOpen = false;
        var response = await HttpClient.PostJsonAsync<Department>("api/departments/create", NewDepartment);
        Toaster.Add($"Новое подразделение успешно добавлено", MatToastType.Success, "Успех!");
        departments.Add(response);
        NewDepartment = new Department();
    }

    void OpenEditDepartmentDialog(Department department)
    {
        editDepartmentDialogIsOpen = true;
        currentDepartment = department;
        DepatrmentName = currentDepartment.Name;
    }

    void CancelUpdateDepartment()
    {
        editDepartmentDialogIsOpen = false;
        currentDepartment = null;
    }

    async Task UpdateDepartment()
    {
        editDepartmentDialogIsOpen = false;
        currentDepartment.Name = DepatrmentName;
        await HttpClient.PutJsonAsync<Department>($"api/departments/update/{currentDepartment.DepartmentId}", currentDepartment);
        Toaster.Add($"Информация о подразделении успешно обновлена", MatToastType.Success, "Успех!");
        currentDepartment = null;
    }

    async Task DeleteDepartment()
    {
        editDepartmentDialogIsOpen = false;
        var response = await HttpClient.DeleteAsync($"api/departments/delete/{currentDepartment.DepartmentId}");
        departments.Remove(currentDepartment);
        Toaster.Add($"Запись удалена", MatToastType.Warning, "Внимание!");
        currentDepartment = null;
    }

    async Task AddNewBuilding()
    {
        newBuildingDialogIsOpen = false;
        var response = await HttpClient.PostJsonAsync<Building>("api/buildings/create", NewBuilding);
        Toaster.Add($"Информация о новом здании успешно добавлена", MatToastType.Success, "Успех!");
        buildings.Add(response);
        NewBuilding = new Building();
    }

    void OpenEditBuildingDialog(Building building)
    {
        editBuildingDialogIsOpen = true;
        currentBuilding = building;
        BuildingName = currentBuilding.Name;
    }

    void CancelUpdateBuilding()
    {
        editBuildingDialogIsOpen = false;
        currentBuilding = null;
    }

    async Task UpdateBuilding()
    {
        editBuildingDialogIsOpen = false;
        currentBuilding.Name = BuildingName;
        await HttpClient.PutJsonAsync<Building>($"api/buildings/update/{currentBuilding.BuildingId}", currentBuilding);
        Toaster.Add($"Запись успешно обновлена", MatToastType.Success, "Успех!");
        currentBuilding = null;
    }

    async Task DeleteBuilding()
    {
        editBuildingDialogIsOpen = false;
        var response = await HttpClient.DeleteAsync($"api/buildings/delete/{currentBuilding.BuildingId}");
        buildings.Remove(currentBuilding);
        Toaster.Add($"Запись удалена", MatToastType.Warning, "Внимание!");
        currentBuilding = null;
    }

    async Task AddNewSiteSection()
    {
        newSiteSectionDialogIsOpen = false;
        var response = await HttpClient.PostJsonAsync<SiteSection>("api/sections/sitesection/create", NewSiteSection);
        Toaster.Add($"Новое подразделение успешно добавлено", MatToastType.Success, "Успех!");
        siteSections.Add(response);
        NewSiteSection = new SiteSection();
    }

    async Task AddNewSiteSubSection()
    {
        newSiteSubSectionDialogIsOpen = false;
        var response = await HttpClient.PostJsonAsync<SiteSection>("api/sections/sitesection/create", NewSiteSection);
        Toaster.Add($"Новое подразделение успешно добавлено", MatToastType.Success, "Успех!");
        siteSections.Add(response);
        NewSiteSubSection = new SiteSubsection();
    }
}
