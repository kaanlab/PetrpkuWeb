@page "/catalog"

@attribute [Authorize(Roles = AuthRole.ADMIN)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject IMatToaster Toaster


<h2 class="col-12 mb-4 text-center">Справочники</h2>

<div class="row md-2">
    <div class="col-6">
        <MatButton Outlined="true" Icon="add" OnClick="@(e => { newDepartmentDialogIsOpen = true; })" Label="Добавить подразделение" />
    </div>
    <div class="col-6">
        <MatButton Outlined="true" Icon="add" OnClick="@(e => { newBuildingDialogIsOpen = true; })" Label="Добавить здание" />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <h2 class="text-center">Список подразделений</h2>
        @if (Departments is null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (Departments.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">Список пуст</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Название</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var department in Departments)
                    {
                        @if (!department.IsVisible)
                        {
                            TrCssClass = "table-danger";
                        }
                        else
                        {
                            TrCssClass = null;
                        }

                        <tr @key="department" class="@TrCssClass">
                            <td>@department.Name</td>
                            <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenEditDepartmentDialog(department))" Label="Редактировать" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-6">
        <h2 class="text-center">Список зданий</h2>
        @if (Buildings is null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (Buildings.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">Список пуст</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Название</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var building in Buildings)
                    {
                        <tr @key="building">
                            <td>@building.Name</td>
                            <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenEditBuildingDialog(building))" Label="Редактировать" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<EditForm Model="@NewDepartment">
    <MatDialog @bind-IsOpen="@newDepartmentDialogIsOpen">
        <MatDialogTitle>Выберете пользователя</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Подразделение" @bind-Value="@NewDepartment.Name"></MatTextField>
            <label>Отображать в меню</label>
            <MatSlideToggle @bind-Checked="@NewDepartment.IsVisible"></MatSlideToggle>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newDepartmentDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@AddNewDepartment" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@if (currentDepartment is { })
{
    <EditForm Model="@currentDepartment">
        <MatDialog @bind-IsOpen="@editDepartmentDialogIsOpen">
            <MatDialogTitle>Редактировать подразделение</MatDialogTitle>
            <MatDialogContent>
                <MatTextField Label="Подразделение" @bind-Value="@DepatrmentName"></MatTextField>
                <label>Отображать в меню</label>
                <MatSlideToggle @bind-Checked="@currentDepartment.IsVisible"></MatSlideToggle>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@CancelUpdateDepartment" Label="Отмена" />
                <MatButton Icon="" Type="submit" OnClick="@(() => UpdateDepartment())" Label="Обновить" />
                <MatButton Icon="delete_forever" OnClick="@(() => DeleteDepartment())" Label="Удалить" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

<EditForm Model="@NewBuilding">
    <MatDialog @bind-IsOpen="@newBuildingDialogIsOpen">
        <MatDialogTitle>Выберете пользователя</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Подразделение" @bind-Value="@NewBuilding.Name"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newBuildingDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@AddNewBuilding" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@if (currentBuilding is { })
{
    <EditForm Model="@currentBuilding">
        <MatDialog @bind-IsOpen="@editBuildingDialogIsOpen">
            <MatDialogTitle>Редактировать здание</MatDialogTitle>
            <MatDialogContent>
                <MatTextField Label="Название" @bind-Value="@BuildingName"></MatTextField>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@CancelUpdateBuilding" Label="Отмена" />
                <MatButton Icon="" Type="submit" OnClick="@(() => UpdateBuilding())" Label="Обновить" />
                <MatButton Icon="delete_forever" OnClick="@(() => DeleteBuilding())" Label="Удалить" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

@code {


    private List<Department> Departments { get; set; }
    private List<Building> Buildings { get; set; }

    string TrCssClass;

    Department NewDepartment { get; set; } = new Department();
    Building NewBuilding { get; set; } = new Building();

    Department currentDepartment;

    private string _departmentName;
    public string DepatrmentName
    {
        get => _departmentName;
        set
        {
            _departmentName = value;
            this.StateHasChanged();
        }
    }

    Building currentBuilding;

    private string _buildingName;
    public string BuildingName
    {
        get => _buildingName;
        set
        {
            _buildingName = value;
            this.StateHasChanged();
        }
    }

    bool newDepartmentDialogIsOpen = false;
    bool newBuildingDialogIsOpen = false;

    bool editDepartmentDialogIsOpen = false;
    bool editBuildingDialogIsOpen = false;


    protected async override Task OnInitializedAsync()
    {
        Departments = await HttpClient.GetJsonAsync<List<Department>>("api/departments/all");
        Buildings = await HttpClient.GetJsonAsync<List<Building>>("api/buildings/all");
    }

    async Task AddNewDepartment()
    {
        newDepartmentDialogIsOpen = false;
        var response = await HttpClient.PostJsonAsync<Department>("api/departments/create", NewDepartment);
        Toaster.Add($"Новое подразделение успешно добавлено", MatToastType.Success, "Успех!");
        Departments.Add(response);
        NewDepartment = new Department();
    }

    void OpenEditDepartmentDialog(Department department)
    {
        editDepartmentDialogIsOpen = true;
        currentDepartment = department;
        DepatrmentName = currentDepartment.Name;
    }

    void CancelUpdateDepartment()
    {
        editDepartmentDialogIsOpen = false;
        currentDepartment = null;
    }

    async Task UpdateDepartment()
    {
        editDepartmentDialogIsOpen = false;
        currentDepartment.Name = DepatrmentName;
        await HttpClient.PutJsonAsync<Department>($"api/departments/update/{currentDepartment.DepartmentId}", currentDepartment);
        Toaster.Add($"Информация о подразделении успешно обновлена", MatToastType.Success, "Успех!");
        currentDepartment = null;
    }

    async Task DeleteDepartment()
    {
        editDepartmentDialogIsOpen = false;
        var response = await HttpClient.DeleteAsync($"api/departments/delete/{currentDepartment.DepartmentId}");
        Departments.Remove(currentDepartment);
        Toaster.Add($"Запись удалена", MatToastType.Warning, "Внимание!");
        currentDepartment = null;
    }

    async Task AddNewBuilding()
    {
        newBuildingDialogIsOpen = false;
        var response = await HttpClient.PostJsonAsync<Building>("api/buildings/create", NewBuilding);
        Toaster.Add($"Информация о новом здании успешно добавлена", MatToastType.Success, "Успех!");
        Buildings.Add(response);
        NewBuilding = new Building();
    }

    void OpenEditBuildingDialog(Building building)
    {
        editBuildingDialogIsOpen = true;
        currentBuilding = building;
        BuildingName = currentBuilding.Name;
    }

    void CancelUpdateBuilding()
    {
        editBuildingDialogIsOpen = false;
        currentBuilding = null;
    }

    async Task UpdateBuilding()
    {
        editBuildingDialogIsOpen = false;
        currentBuilding.Name = BuildingName;
        await HttpClient.PutJsonAsync<Building>($"api/buildings/update/{currentBuilding.BuildingId}", currentBuilding);
        Toaster.Add($"Запись успешно обновлена", MatToastType.Success, "Успех!");
        currentBuilding = null;
    }

    async Task DeleteBuilding()
    {
        editBuildingDialogIsOpen = false;
        var response = await HttpClient.DeleteAsync($"api/buildings/delete/{currentBuilding.BuildingId}");
        Buildings.Remove(currentBuilding);
        Toaster.Add($"Запись удалена", MatToastType.Warning, "Внимание!");
        currentBuilding = null;
    }
}
