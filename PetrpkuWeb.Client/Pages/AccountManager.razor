@page "/accountmanager"


@inject HttpClient HttpClient
@inject IMatToaster Toaster

<h2 class="col-12 mb-4 text-center">Пользователи</h2>

<div class="row mb-5">
    <MatButton Outlined="true" Icon="add" OnClick="@OpenNewUserDialog" Label="Добавить пользователя" />
</div>
<div class="row">
    <div class="col-6">
        <h2 class="text-center">Активные учетные записи</h2>
        @if (UsersIdentity == null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (UsersIdentity.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">No users...</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Логин</th>
                        <th scope="col">Ф.И.О.</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                @foreach (var user in UsersIdentity)
                {
                    var id = user.Id;
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.DisplayName</td>
                        <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenEditUserDialog(id))" Label="Удалить" /></td>
                    </tr>
                }
            </table>
        }
    </div>
    <div class="col-6">
        <h2 class="text-center">Архивные учетные записи</h2>
        @if (disabledUsers == null)
        {
            <div class="spinner-border text-primary text-center" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (disabledUsers.Count == 0)
        {
            <div class="card border-danger mb-3">
                <div class="card-body">
                    <p class="card-text">No users...</p>
                </div>
            </div>
        }
        else
        {
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Должность</th>

                    </tr>
                </thead>
                @foreach (var user in disabledUsers)
                {

                    <tr>
                        <td>@user.DisplayName</td>
                    </tr>
                }
            </table>
        }
    </div>
</div>

<EditForm Model="@LdapUser">
    <MatDialog @bind-IsOpen="@newUserDialogIsOpen">
        <MatDialogTitle>Выберете пользователя</MatDialogTitle>
        <MatDialogContent>
            <MatSelect @bind-Value="@LdapUser.UserName" Outlined="true">
                @if (LdapUsers == null)
                {
                    <MatOption Value="">(loading...)</MatOption>
                }
                else
                {
                    <MatOption Value="-1" Disabled="true" />
                    @foreach (var user in LdapUsers)
                    {
                        <MatOption Value="@user.UserName">@user.DisplayName</MatOption>
                    }
                }
            </MatSelect>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { newUserDialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="check" Type="submit" OnClick="@(() =>AddAccount(LdapUser.UserName))" Label="Добавить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@if (User != null)
{
    <EditForm Model="@User">
        <MatDialog @bind-IsOpen="@editUserDialogIsOpen">
            <MatDialogTitle>Удалить пользователя @User.DisplayName?</MatDialogTitle>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@(e => { editUserDialogIsOpen = false; })" Label="Отмена" />
                <MatButton Icon="delete_forever" Type="submit" OnClick="@(() => Delete(User.Id))" Label="Да" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

@code {

    private List<LdapUser> LdapUsers { get; set; }
    private List<AppUserIdentity> UsersIdentity { get; set; }
    private AppUserIdentity User { get; set; }
    private LdapUser LdapUser { get; set; } = new LdapUser();
    List<AppUser> appUsers;
    List<AppUser> disabledUsers;

    bool editUserDialogIsOpen = false;
    bool newUserDialogIsOpen = false;


    protected async override Task OnInitializedAsync()
    {
        await GetIdentity();
        await GetAppUsers();
        LdapUsers = await HttpClient.GetJsonAsync<List<LdapUser>>("api/account/ldap/all");
    }

    async Task GetIdentity()
    {
        UsersIdentity = await HttpClient.GetJsonAsync<List<AppUserIdentity>>("api/account/identity/all");
    }

    async Task GetAppUsers()
    {
        appUsers = await HttpClient.GetJsonAsync<List<AppUser>>("api/users/all/active");
        disabledUsers = await HttpClient.GetJsonAsync<List<AppUser>>("api/users/all/disabled");
    }

    void OpenNewUserDialog()
    {
        newUserDialogIsOpen = true;
    }

    async Task AddAccount(string userName)
    {
        newUserDialogIsOpen = false;
        var newUser = LdapUsers.FirstOrDefault(u => u.UserName == userName);
        await HttpClient.PostJsonAsync<LdapUser>("api/account/identity/add", newUser);
        await GetIdentity();

    }

    void OpenEditUserDialog(string userId)
    {
        editUserDialogIsOpen = true;
        User = UsersIdentity.FirstOrDefault(ui => ui.Id == userId);
    }

    async Task Delete(string userId)
    {
        editUserDialogIsOpen = false;
        await HttpClient.DeleteAsync($"api/account/identity/delete/{userId}");
        await GetIdentity();
        await GetAppUsers();
    }

}