@page "/accountmanager"


@inject HttpClient HttpClient


<h2 class="col-12 mb-4 text-center">Добавление пользователей в систему</h2>

@if (usersIdentity == null)
{
    <div class="spinner-border text-primary text-center" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else if (usersIdentity.Count == 0)
{
    <div class="card border-danger mb-3">
        <div class="card-body">
            <p class="card-text">No users...</p>
        </div>
    </div>
}
else
{
    <table class="table">
        <thead class="thead-dark">
        <tr>
            <th scope="col">Ф.И.О</th>
            <th scope="col">Должность</th>
            <th scope="col"></th>
        </tr>
        </thead>
        @foreach (var user in usersIdentity)
        {
            <tr>
                <td>@user.DisplayName</td>
                <td>@user.UserName</td>
                <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenDialog(user.Id))" Label="Редактировать" /></td>
            </tr>
        }
    </table>
}

@if (user != null)
{
    <EditForm Model="@user">
        <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>День рождения @user.DisplayName</MatDialogTitle>
            <MatDialogContent>
                <p>Укажите должность</p>
                <InputText @bind-Value="@user.UserName"></InputText>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
                <MatButton Icon="save" Type="submit" OnClick="@Delete" Label="Сохранить" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

@code {

    List<LdapUser> ldapUsers { get; set; }
    List<AppUserIdentity> usersIdentity { get; set; }
    AppUserIdentity user { get; set; }
    LdapUser ldapUser { get; set; }

    bool dialogIsOpen = false;


    protected async override Task OnInitializedAsync()
    {
        usersIdentity = await HttpClient.GetJsonAsync<List<AppUserIdentity>>("api/account/identity/all");
        ldapUsers = await HttpClient.GetJsonAsync<List<LdapUser>>("api/account/ldap/all");
    }

    async Task AddAccount()
    {
        await HttpClient.PostJsonAsync<LdapUser>("api/account/add/identity", ldapUser);
    }

    void OpenDialog(string userId)
    {
        dialogIsOpen = true;
        user = usersIdentity.Where(ui => ui.Id == userId).FirstOrDefault();
    }

    async Task Delete()
    {
        dialogIsOpen = false;
        await HttpClient.PostJsonAsync<LdapUser>("api/account/add", ldapUser);
    }

}