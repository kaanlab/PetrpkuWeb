@page "/posts/show/{PostId:int}"

@inject HttpClient HttpClient


@if (post is { })
{
    <div class="card">
        <div class="card-body">
            <img src=@post.Poster class="rounded img-fluid float-left mr-4">
            <h5 class="card-title">@post.Title</h5>
            <span class="card-text">
                <MarkdownView Content="@post.Content" />
            </span>
        </div>
        <ul class="list-group list-group-flush">
            @if (post.Attachments.Any())
            {
                var rand = new Random(3);
                @if (post.Attachments.Where(a => a.IsImage == true).Count() > 1)
                {
                    <li class="list-group-item img-container">
                        @foreach (var attachment in post.Attachments.Where(a => a.IsImage == true))
                        {
                            int index = rand.Next(imgCssClass.Length);
                            <a @key="attachment" class="spotlight @imgCssClass[index]" href="@attachment.Path">
                                <img src="@attachment.Path" />
                            </a>
                        }

                    </li>
                }
                else
                {
                    var imgAttachment = post.Attachments.SingleOrDefault(a => a.IsImage == true);
                    <li class="list-group-item">
                        <img class="spotlight img-thumbnail img-fluid" src="@imgAttachment.Path" />
                    </li>
                }

                <li class="list-group-item">
                    <table class="table">
                        @foreach (var attachment in post.Attachments.Where(a => a.IsImage == false))
                        {
                            <tr @key="attachment">
                                <td><img class="img-fluid" src="@CssExtension.Img(attachment.Extension)" /></td>
                                <td>@attachment.Description</td>
                                <td>@attachment.Name</td>
                                <td>@attachment.Length</td>
                                <td>
                                    <form method="get" action="@attachment.Path">
                                        <MatButton Type="submit" Icon="cloud_download" />
                                    </form>
                                </td>
                            </tr>

                        }
                    </table>
                </li>
            }
        </ul>
        <div class="card-footer text-muted">
            @if (identityUserId == post.Author.AppUserId || identityUser.IsInRole(AuthRole.ADMIN))
            {
                <MatButton Icon="edit" Link="@($"/post/edit/{post.PostId}")" />
            }
            <p>@post.Author.FirstName @post.Author.LastName</p>
            @if (post.UpdateDate.HasValue)
            {
                <p>Обновлено: @post.UpdateDate.Value.ToShortDateString()</p>
            }
            <p>Опубликовано: @post.PublishDate.ToShortDateString()</p>
        </div>
    </div>
}

@code {

    [Parameter]
    public int PostId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ClaimsPrincipal identityUser;
    int identityUserId;

    private Post post;

    string[] imgCssClass = { "big", "vertical", String.Empty };

    protected override async Task OnInitializedAsync()
    {
        identityUser = (await authenticationStateTask).User;
        identityUserId = Int32.Parse(identityUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value);
    }

    protected override async Task OnParametersSetAsync()
    {
        post = await HttpClient.GetJsonAsync<Post>($"api/posts/show/{PostId}");

    }

}
