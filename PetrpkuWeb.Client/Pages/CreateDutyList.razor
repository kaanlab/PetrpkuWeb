@page "/createdutylist"

@using PetrpkuWeb.Client.Extensions

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime


<h2 class="col-12 mb-2 text-center">График дежурства руководящего состава ППКУ на @PikDate.Value.ToString("MMMM yyyy").ToLower() г.</h2>

<div class="row">
    <div class="col-6">
        @if (listOfDuty != null)
        {
            <table class="table">
                <thead>
                    <tr>

                        <th>
                            <span @onclick="@(() => SortTable("DayOfDuty"))">Дата</span>
                            <MatIcon Icon="@(GetSortStyle("DayOfDuty"))"></MatIcon>
                        </th>
                        <th>
                            Дежурный
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var dutyUser in listOfDuty)
                {
                    <tr>
                        <td>@dutyUser.DayOfDuty.Day</td>
                        <td>@dutyUser.AssignedTo.LastName</td>
                        <td><MatButton OnClick="@(() => RemoveDutyUser(dutyUser))" Label="Удалить" /></td>
                    </tr>
                }
            </table>
        }
    </div>
    <div class="col-6">
        <EditForm EditContext="@EditContext" OnValidSubmit="@AddDuty">
            <div class="row">
                <div class="col-12">
                    <DataAnnotationsValidator />
                    <ValidationErrors Model="@dutyVM" />
                </div>
                <div class="col-4">
                    <MatSelect Label="Выберете дату" @bind-Value="dutyVM.Day">
                        @if (days == null)
                        {
                            <MatOption Value="">(loading...)</MatOption>
                        }
                        else
                        {
                            <MatOption Value="-1" Disabled="true" />
                            @foreach (var day in days)
                            {
                                <MatOption Value="@day.Day.ToString()">@day.Day</MatOption>
                            }
                        }
                    </MatSelect>
                </div>
                <div class="col-8">
                    <MatSelect Label="Выберете дежурного" @bind-Value="dutyVM.User">
                        @if (users == null)
                        {
                            <MatOption Value="">(loading...)</MatOption>
                        }
                        else
                        {
                            <MatOption Value="-1" Disabled="true" />
                            @foreach (var user in users)
                            {
                                <MatOption Value="@user.UserInfoId.ToString()">@user.LastName - @user.WorkingPosition</MatOption>
                            }
                        }
                    </MatSelect>
                </div>
            </div>
            <div class="row md-2">
                <MatButton Type="submit" Disabled="@DisabledOnValidation" Label="Добавить" />
            </div>
        </EditForm>

        <div class="row md-2">
            <MatDatePicker Label="Выберете месяц" Outlined="true" @bind-Value="PikDate" />
        </div>
        <div class="row md-2">
            <MatButton Raised="true" Icon="calendar_today" OnClick="@(() => GetCalendarAsync(PikDate.Value.Month, PikDate.Value.Year))" Label="Применить" />
        </div>
        <div class="row md-2">
            <MatButton Raised="true" Icon="save_alt" OnClick="@(() => DownloadFile(PikDate.Value.Month, PikDate.Value.Year))" Label="Скачать" />
        </div>
    </div>
</div>


@code {

    public DateTime? PikDate { get; set; } = DateTime.Now.ToLocalTime();
    public List<Duty> listOfDuty { get; set; } = new List<Duty>();
    List<UserInfo> users;
    List<DateTime> days { get; set; }


    #region Sort table prop

    bool IsSortedAscending;
    string CurrentSortColumn;

    #endregion


    #region Validation prop

    private EditContext EditContext;
    protected DutyVM dutyVM { get; set; } = new DutyVM();
    protected bool DisabledOnValidation { get; set; } = true;

    #endregion


    #region Validation methods
    protected override void OnInitialized()
    {
        EditContext = new EditContext(dutyVM);
        EditContext.OnFieldChanged += OnFieldChanged;

        base.OnInitialized();
    }

    protected override void OnAfterRender()
    {
        base.OnAfterRender();

        DisabledSubmitButton();
    }


    private void OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        DisabledSubmitButton();
    }

    private void DisabledSubmitButton()
    {
        if (EditContext.Validate())
        {
            DisabledOnValidation = false;
        }
        else
        {
            DisabledOnValidation = true;
        }
    }


    #endregion


    protected async override Task OnInitializedAsync()
    {
        var year = PikDate.Value.Year;
        var month = PikDate.Value.Month;

        await GetCalendarAsync(month, year);

        users = await HttpClient.GetJsonAsync<List<UserInfo>>("api/users/all");

    }

    async Task GetCalendarAsync(int month, int year)
    {
        listOfDuty = null;
        listOfDuty = await HttpClient.GetJsonAsync<List<Duty>>($"/api/duty/month/{month}/{year}");

        days = Enumerable.Range(1, DateTime.DaysInMonth(year, month)).Select(day => new DateTime(year, month, day))
            .ToList();

        days.RemoveAll(r => listOfDuty.Exists(d => d.DayOfDuty.Day == r.Day));
    }

    async Task RemoveDutyUser(Duty dutyUser)
    {
        if (dutyUser.DutyId > 0)
        {
            var deleteDutyUser = listOfDuty.Where(u => u.DutyId == dutyUser.DutyId).FirstOrDefault();
            await HttpClient.DeleteAsync($"/api/duty/delete/{deleteDutyUser.DutyId}");
        }

        listOfDuty.Remove(dutyUser);
        days.Add(dutyUser.DayOfDuty);

    }

    async Task AddDuty()
    {

        var year = PikDate.Value.Year;
        var month = PikDate.Value.Month;
        var day = Int32.Parse(dutyVM.Day);
        var user = Int32.Parse(dutyVM.User);
        var date = new DateTime(year, month, day);
        var findUser = users.Where(u => u.UserInfoId == user).FirstOrDefault();

        var duty = new Duty()
        {
            DayOfDuty = date,
            UserInfoId = findUser.UserInfoId

        };

        listOfDuty.Add(new Duty
        {
            DayOfDuty = date,
            AssignedTo = findUser
        });

        days.Remove(duty.DayOfDuty);

        await HttpClient.PostJsonAsync<Duty>("/api/duty/create", duty);

    }

    async Task DownloadFile(int month, int year)
    {
        var file = await HttpClient.GetByteArrayAsync($"/api/duty/getfile/{month}/{year}");

        await JSRuntime.SaveAs($"Дежурные_на_{month}-{year}_{DateTime.Now.ToString("HH-mm-ss")}.docx", file);
    }

    #region Sort tabe methods
    void SortTable(string columnName)
    {
        if (listOfDuty.Any())
        {

            if (columnName != CurrentSortColumn)
            {
                //We need to force order by descending on the new column
                listOfDuty = listOfDuty.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
                CurrentSortColumn = columnName;
                IsSortedAscending = true;

            }
            if (IsSortedAscending)
            {
                listOfDuty = listOfDuty.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                listOfDuty = listOfDuty.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            IsSortedAscending = !IsSortedAscending;
        }
    }

    string GetSortStyle(string columnName)
    {
        if (CurrentSortColumn != columnName)
        {
            return "sort";
        }
        if (IsSortedAscending)
        {
            return "keyboard_arrow_up";
        }
        else
        {
            return "keyboard_arrow_down";
        }
    }

    #endregion

}
