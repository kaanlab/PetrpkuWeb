@page "/article/show/{ArticleId:int}"

@attribute [Authorize(Roles = "admin_webportal, user_webportal, kadry_webportal")]

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime


@if (article != null)
{
    <div class="card @CssExtension.Border(article)">
        <div class="card-body @CssExtension.Text(article)">
            <h5 class="card-title">@article.Title</h5>
            <p class="card-text">@article.Content</p>
        </div>
        <ul class="list-group list-group-flush">
            @if (article.Attachments.Any())
            {
                var rand = new Random();
                <li class="list-group-item img-container">

                    @foreach (var attachment in article.Attachments)
                    {
                        
                        @if (attachment.Extension.ToLower().StartsWith(".jp") || attachment.Extension.ToLower().StartsWith(".pn"))
                        {
                            int index = rand.Next(imgCssClass.Length);
                            <a class="spotlight" href="@attachment.Path">
                                <img class=@imgCssClass[index] src="@attachment.Path" />
                            </a>
                        }
                    }

                </li>
                <li class="list-group-item">
                    <table class="table">
                        @foreach (var attachment in article.Attachments)
                        {
                            @if (attachment.Extension.ToLower().StartsWith(".doc") || attachment.Extension.ToLower().StartsWith(".xls") || attachment.Extension.ToLower().StartsWith(".rtf") || attachment.Extension.ToLower().StartsWith(".pdf"))
                            {
                                <tr>
                                    <td><img class="img-fluid" src="@CssExtension.Img(attachment.Extension)" /></td>
                                    <td>@attachment.Description</td>
                                    <td>@attachment.Name</td>
                                    <td>@attachment.Length</td>
                                    <td>
                                        <form method="get" action="@attachment.Path">
                                            <MatButton Type="submit" Icon="cloud_download" />
                                        </form>
                                    </td>
                                </tr>
                            }
                        }
                    </table>
                </li>
            }
        </ul>
        <div class="card-footer text-muted">
            <p>@article.Author.FirstName @article.Author.LastName</p>
            <p>@article.PublishDate.ToShortDateString()</p>
        </div>
    </div>
}

@code {

    [Parameter]
    public int ArticleId { get; set; }

    private Article article;

    string[] imgCssClass = { "big", "vertical", String.Empty };

    protected override async Task OnInitializedAsync()
    {
        article = await HttpClient.GetJsonAsync<Article>($"api/articles/show/{ArticleId}");
    }

}
