@page "/createarticle"

@using Newtonsoft.Json
@using AutoMapper

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMapper mapper
@inject IMatToaster Toaster


<h2 class="col-12 mb-4 text-center">Новое объявление</h2>

<div class="row">
    <div class="col-12">
        <EditForm Model="NewArticle" OnValidSubmit="@AddArticle" OnInvalidSubmit="@(() => Toaster.Add("Для публикации объявления необходимо заполнить поля заголовок и текст",MatToastType.Danger,"Ошибка!"))">
            <div class="col-12">
                <DataAnnotationsValidator />
            </div>
            <div class="col-12 mb-2">
                <MatTextField Label="Заголовок" @bind-Value="@NewArticle.Title"></MatTextField>
                <ValidationMessage For="() => NewArticle.Title" />
            </div>
            <div class="col-12 mb-2">
                <MatTextField Label="Текст" TextArea="true" @bind-Value="@NewArticle.Content"></MatTextField>
                <ValidationMessage For="() => NewArticle.Content" />
            </div>
            <div class="col-12 mb-2">
                Выберете важность сообщения
                <select @bind="NewArticle.Type">
                    @foreach (Article.Style styleType in Enum.GetValues(typeof(Article.Style)))
                    {
                        <option value="@styleType">@styleType.DisplayName()</option>
                    }
                </select>
            </div>
            <table class="table">
                @foreach (var file in ListFileUploadVM)
                {
                        var index = ListFileUploadVM.IndexOf(file);
                        <tr>
                            <td>@(ListFileUploadVM.IndexOf(file) + 1)</td>
                            <td><img src="@CssExtension.Img(file.Extension)" /></td>
                            <td>@file.Description</td>
                            <td>@file.Name</td>
                            <td>@file.Length</td>
                            <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenDialog(index))" Label="Редактировать" /></td>
                        </tr>
                }
            </table>
            <div class="col-12 mb-2">
                <MatButton Raised="true" Icon="add" Type="submit" Label="Создать" />
            </div>
        </EditForm>
    </div>

    <br />

    <div class="col-12 mb-2">
        <div class="alert alert-danger" role="alert">
            Добавте файлы для загрузки. Если необходимо добавить несколько файлов удерживайте нажатой клавишу Ctrl.
            @if (ListFileInfoVM.Any())
            {
                <table class="table">
                    @foreach (var fileInfo in ListFileInfoVM)
                    {
                        <tr>
                            <td>@(ListFileInfoVM.IndexOf(fileInfo) + 1)</td>
                            <td><img src="@CssExtension.Img(fileInfo.Type)" /></td>
                            <td>@fileInfo.Name</td>
                            <td>@fileInfo.Size</td>
                        </tr>
                    }

                </table>
                <div class="row">
                    <button @onclick="ClearFile" class="btn btn-primary">Очистить</button>
                    <button @onclick="UploadFiles" class="btn btn-primary">Загрузить файлы</button>
                </div>

            }
        </div>
        <input type="file" multiple @ref="inputElement" />

        <MatButton OnClick="ShowFileInfo" Disabled="@(ListFileInfoVM.Any())" Label="Добавить файлы" />

    </div>
</div>

<EditForm Model="@FileUploadVM">
    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>"@FileUploadVM.Name</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Фамилия" @bind-Value="@FileUploadVM.Description"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="save" OnClick="@DeleteFileUploadVM" Label="Удалить" />
            <MatButton Icon="save" Type="submit" OnClick="@UpdateFileUploadVM" Label="Сохранить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int identityUserId;

    Article NewArticle { get; set; } = new Article();

    List<FileUploadViewModel> ListFileUploadVM { get; set; } = new List<FileUploadViewModel>();
    FileUploadViewModel FileUploadVM { get; set; } = new FileUploadViewModel();

    List<IFileInfo> FileList { get; } = new List<IFileInfo>();

    List<FileInfoViewModel> ListFileInfoVM { get; set; } = new List<FileInfoViewModel>();

    bool dialogIsOpen = false;

    ElementReference inputElement;
    IFileReaderRef fileReaderReference;

    string[] imgCssClass = { "big", "vertical", String.Empty };
    string Description = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        var identityUser = (await authenticationStateTask).User;
        identityUserId = Int32.Parse(identityUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value);
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    public async Task ShowFileInfo()
    {
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();

            var fileData = new FileInfoViewModel();
            fileData.Name = fileInfo.Name;
            fileData.Size = fileInfo.Size;
            fileData.Type = fileInfo.Type;
            ListFileInfoVM.Add(fileData);
        }
    }

    public async Task ClearFile()
    {
        ListFileInfoVM.Clear();
        await fileReaderReference.ClearValue();
    }

    public async Task UploadFiles()
    {
        this.FileList.Clear();

        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192), "files", (await file.ReadFileInfoAsync()).Name);
        }

        var response = await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
        var content = await response.Content.ReadAsStringAsync();
        ListFileUploadVM.AddRange(JsonConvert.DeserializeObject<List<FileUploadViewModel>>(content));
        await ClearFile();
    }

    public async Task AddArticle()
    {
        NewArticle.Attachments = mapper.Map<List<Attachment>>(ListFileUploadVM);
        NewArticle.AppUserId = identityUserId;
        NewArticle.PublishDate = DateTime.Now;
        var response = await HttpClient.PostJsonAsync<Article>("api/articles/create", NewArticle);
        Toaster.Add($"Объявление успешно опубликовано: {response.Title}", MatToastType.Success, "Успех!");
        NavigationManager.NavigateTo($"article/{response.ArticleId}");
    }

    void OpenDialog(int index)
    {
        FileUploadVM = ListFileUploadVM[index];
        dialogIsOpen = true;
    }

    void UpdateFileUploadVM()
    {
        var vm = ListFileUploadVM.Where(f => f.Name == FileUploadVM.Name).FirstOrDefault();
        var index = ListFileUploadVM.IndexOf(vm);
        ListFileUploadVM[index] = FileUploadVM;
        dialogIsOpen = false;
    }

    void DeleteFileUploadVM()
    {
        var vm = ListFileUploadVM.Where(f => f.Name == FileUploadVM.Name).FirstOrDefault();
        ListFileUploadVM.Remove(vm);
        dialogIsOpen = false;
    }

}
