@page "/article/create"

@attribute [Authorize(Roles = AuthRole.ANY)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMatToaster Toaster


<h2 class="col-12 mb-4 text-center">Новое объявление</h2>

<div class="row">
    <div class="col-12">
        <EditForm Model="NewArticle" OnValidSubmit="@AddArticle" OnInvalidSubmit="@(() => Toaster.Add("Для публикации необходимо заполнить поля заголовок и текст",MatToastType.Danger,"Ошибка!"))">
            <div class="col-12 mb-2">
                <DataAnnotationsValidator />
                <MatButton Raised="true" Icon="add" Type="submit" Label="Создать" />
            </div>
            <div class="col-12 mb-2">
                <MatTextField Label="Заголовок" FullWidth="true" @bind-Value="@NewArticle.Title"></MatTextField>
                <ValidationMessage For="() => NewArticle.Title" />
            </div>
            
            <div class="form-group">
                <label>Аннотация</label>
                <input class="form-control" type="text" placeholder=@NewArticle.Content.Truncate(200) readonly>
            </div>
            
            <label>Текст</label>
            <div class="row">
                <div class="col-6">
                    <textarea class="form-control" rows="15" @bind-value="NewArticle.Content" @bind-value:event="oninput"></textarea>
                    <ValidationMessage For="() => NewArticle.Content" />
                </div>
                <div class="col-6 alert alert-info" role="alert">
                    <MarkdownView Content="@NewArticle.Content" />
                </div>
            </div>

            <div class="col-12 mb-2">
                <label>Выберете важность сообщения</label>
                <select class="form-control" @bind="NewArticle.Type">
                    @foreach (Article.Style styleType in Enum.GetValues(typeof(Article.Style)))
                    {
                        <option value="@styleType">@styleType.DisplayName()</option>
                    }
                </select>
            </div>
            <table class="table">
                @foreach (var attachment in listOfAttachments)
                {
                    var index = listOfAttachments.IndexOf(attachment);
                    <tr>
                        <td>@(listOfAttachments.IndexOf(attachment) + 1)</td>
                        <td><img src="@CssExtension.Img(attachment.Extension)" /></td>
                        <td>@attachment.Description</td>
                        <td>@attachment.Name</td>
                        <td>@attachment.Length</td>
                        <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenDialog(attachment.AttachmentId))" Label="Редактировать" /></td>
                    </tr>
                }
            </table>
        </EditForm>
    </div>

    <br />

    <div class="col-12 mb-2">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Добавте файлы для загрузки</h4>
            <p>Если необходимо добавить несколько файлов удерживайте нажатой клавишу Ctrl.</p>

            @if (ListFileInfoVM.Any())
            {
                <table class="table">
                    @foreach (var fileInfo in ListFileInfoVM)
                    {
                        <tr>
                            <td>@(ListFileInfoVM.IndexOf(fileInfo) + 1)</td>
                            <td><img src="@CssExtension.Img(fileInfo.Type)" /></td>
                            <td>@fileInfo.Name</td>
                            <td>@fileInfo.Size</td>
                        </tr>
                    }

                </table>
                <div class="col-12">
                    <button @onclick="ClearFileInfo" class="btn btn-primary mr-2">Очистить</button>
                    <button @onclick="UploadFiles" class="btn btn-primary">Загрузить файлы</button>
                </div>
            }

            <hr>
            <input type="file" accept="@StringExtension.ACCEPT_ALL_FILES" multiple @ref="inputElement" />
            <hr>
            <MatButton Raised="true" OnClick="ShowFileInfo" Disabled="@(ListFileInfoVM.Any())" Label="Добавить файлы" />
        </div>
    </div>
</div>

<EditForm Model="@CurrentAttachment">
    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>"@CurrentAttachment.Name</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Описание" @bind-Value="@CurrentAttachment.Description"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="save" OnClick="DeleteAttachment" Label="Удалить" />
            <MatButton Icon="save" Type="submit" OnClick="UpdateAttachmentInfo" Label="Сохранить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int identityUserId;

    private ArticleViewModel NewArticle { get; set; } = new ArticleViewModel();
    private List<Attachment> listOfAttachments { get; set; } = new List<Attachment>();
    private Attachment CurrentAttachment { get; set; } = new Attachment();

    private List<FileInfoViewModel> ListFileInfoVM { get; set; } = new List<FileInfoViewModel>();

    bool dialogIsOpen = false;

    ElementReference inputElement;
    IFileReaderRef fileReaderReference;


    protected override async Task OnInitializedAsync()
    {
        var identityUser = (await authenticationStateTask).User;
        identityUserId = Int32.Parse(identityUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value);
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    async Task ShowFileInfo()
    {
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();

            var fileData = new FileInfoViewModel();
            fileData.Name = fileInfo.Name;
            fileData.Size = fileInfo.Size;
            fileData.Type = fileInfo.Type;
            ListFileInfoVM.Add(fileData);
        }
    }

    async Task ClearFileInfo()
    {
        ListFileInfoVM.Clear();
        await fileReaderReference.ClearValue();
    }

    async Task UploadFiles()
    {
        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192), "files", (await file.ReadFileInfoAsync()).Name);
        }

        var response = await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
        var content = await response.Content.ReadAsStringAsync();
        listOfAttachments.AddRange(JsonConvert.DeserializeObject<List<Attachment>>(content));

        await ClearFileInfo();
    }

    async Task AddArticle()
    {
        NewArticle.AppUserId = identityUserId;
        NewArticle.Attachments = new List<Attachment>();
        NewArticle.Attachments.AddRange(listOfAttachments);
        var response = await HttpClient.PostJsonAsync<ArticleViewModel>("api/articles/create", NewArticle);
        Toaster.Add($"Объявление успешно опубликовано: {response.Title}", MatToastType.Success, "Успех!");
        NavigationManager.NavigateTo("/");
    }

    void OpenDialog(int attachmentId)
    {
        CurrentAttachment = listOfAttachments.Where(a => a.AttachmentId == attachmentId).FirstOrDefault();

        dialogIsOpen = true;
    }

    async Task UpdateAttachmentInfo()
    {
        CurrentAttachment = await HttpClient.PutJsonAsync<Attachment>($"api/upload/updateinfo/{CurrentAttachment.AttachmentId}", CurrentAttachment);
        Toaster.Add($"Информация для файла {CurrentAttachment.Name} успешно обновлена", MatToastType.Success, "Успех!");

        dialogIsOpen = false;
    }

    async Task DeleteAttachment()
    {
        await HttpClient.DeleteAsync($"api/upload/deleteinfo/{CurrentAttachment.AttachmentId}");
        listOfAttachments.Remove(CurrentAttachment);
        Toaster.Add($"Файл {CurrentAttachment.Name} удален", MatToastType.Success, "Успех!");

        dialogIsOpen = false;
    }

}
