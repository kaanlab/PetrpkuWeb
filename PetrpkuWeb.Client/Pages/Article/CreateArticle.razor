@page "/createarticle"

@using Newtonsoft.Json
@using AutoMapper
@using System.IO

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMapper mapper
@inject IMatToaster Toaster


<h2 class="col-12 mb-4 text-center">Создать объявление</h2>

<div class="row">
    <div class="col-12">
        <EditForm Model="NewArticle" OnValidSubmit="@AddArticle" OnInvalidSubmit="@(() => Toaster.Add("Для публикации объявления необходимо заполнить поля заголовок и текст",MatToastType.Danger,"Ошибка!"))">
            <div class="col-12">
                <DataAnnotationsValidator />
            </div>
            <div class="col-12 mb-2">
                <MatTextField Label="Заголовок" @bind-Value="@NewArticle.Title"></MatTextField>
                <ValidationMessage For="() => NewArticle.Title" />
            </div>
            <div class="col-12 mb-2">
                <MatTextField Label="Текст" TextArea="true" @bind-Value="@NewArticle.Content"></MatTextField>
                <ValidationMessage For="() => NewArticle.Content" />
            </div>
            <div class="col-12 mb-2">
                Выберете важность сообщения
                <select @bind="NewArticle.Type">
                    @foreach (Article.Style styleType in Enum.GetValues(typeof(Article.Style)))
                    {
                        <option value="@styleType">@styleType.DisplayName()</option>
                    }
                </select>
            </div>
            <div class="col-12 mb-2">
                @if (ListFileUploadVM.Any())
                {
                    var rand = new Random();
                    <div class="img-container">
                        @foreach (var file in ListFileUploadVM)
                        {
                            @if (file.Extension.StartsWith(".jp") || file.Extension.StartsWith(".pn"))
                            {
                                int index = rand.Next(imgCssClass.Length);
                                <div class="@imgCssClass[index]">
                                    <img src="@file.Path" />
                                </div>
                            }
                        }
                    </div>
                    <table class="table">
                        @foreach (var file in ListFileUploadVM)
                        {
                            @if (file.Extension.StartsWith(".doc") || file.Extension.StartsWith(".xls") || file.Extension.StartsWith(".rtf") || file.Extension.StartsWith(".pdf"))
                            {
                                var index = ListFileUploadVM.IndexOf(file);
                                <tr>
                                    <td>@(ListFileUploadVM.IndexOf(file) + 1)</td>
                                    <td><img src="@CssExtension.Img(file.Extension)" /></td>
                                    <td>@file.Description</td>
                                    <td>@file.Name</td>
                                    <td>@file.Length</td>
                                    <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenDialog(index))" Label="Редактировать" /></td>
                                </tr>
                            }
                        }
                    </table>
                }
            </div>
            <div class="col-12 mb-2">
                <MatButton Raised="true" Icon="add" Type="submit" Label="Сохранить" />
            </div>
        </EditForm>
    </div>

    <br />

    <div class="col-12 mb-2">
        <div class="alert alert-danger" role="alert">
            Добавте файлы для загрузки. Если необходимо добавить несколько файлов удерживайте нажатой клавишу Ctrl.
            @if (ListFilesVM.Any())
            {
                foreach (var fileData in ListFilesVM)
                {
                    <div class="row">
                        <!-- File info -->
                        <div>
                            <EditForm Model="@FileVM">
                                <h2>@fileData.Name</h2>
                                Size: <strong>@fileData.Size bytes</strong>;
                                Type: <strong>@fileData.Type</strong>
                                <img src="data:image/jpeg;base64,@(fileData.Byte64String)" alt="Red dot" />
                                <p>Width: @fileData.Width</p>
                                <InputNumber @bind-Value="@newWidth"></InputNumber>
                                <p>Height: @fileData.Height</p>
                                <InputNumber @bind-Value="@newHeight"></InputNumber>
                                <button type="submit" @onclick="@(() => Resize(fileData, newWidth, newHeight))" class="btn btn-primary">Resize</button>
                            </EditForm>
                        </div>
                    </div>
                }
                <button @onclick="ClearFile" class="btn btn-primary">Очистить</button>
                <button @onclick="UploadFiles" class="btn btn-primary">Загрузить файлы</button>
            }
        </div>
        <input type="file" accept="image/jpeg, image/png, application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, text/plain, application/pdf" multiple @ref="inputElement" />

        <button @onclick="ShowFileInfo" class="btn btn-primary">Предпросмотр</button>

    </div>
</div>

<EditForm Model="@FileUploadVM">
    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>"@FileUploadVM.Name</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Фамилия" @bind-Value="@FileUploadVM.Description"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="save" OnClick="@DeleteFileUploadVM" Label="Удалить" />
            <MatButton Icon="save" Type="submit" OnClick="@UpdateFileUploadVM" Label="Сохранить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int identityUserId;

    Article NewArticle { get; set; } = new Article();

    List<FileUploadViewModel> ListFileUploadVM { get; set; } = new List<FileUploadViewModel>();
    FileUploadViewModel FileUploadVM { get; set; } = new FileUploadViewModel();

    List<IFileInfo> FileList { get; } = new List<IFileInfo>();

    List<FileDataViewModel> ListFileDataVM { get; set; } = new List<FileDataViewModel>();
    FileDataViewModel FileDataVM { get; set; } = new FileDataViewModel();

    List<FileViewModel> ListFilesVM { get; set; } = new List<FileViewModel>();
    FileViewModel FileVM { get; set; } = new FileViewModel();

    bool dialogIsOpen = false;

    int newWidth = 0;
    int newHeight = 0;


    ElementReference inputElement;
    IFileReaderRef fileReaderReference;

    string[] imgCssClass = { "big", "vertical", String.Empty };
    string Description = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        var identityUser = (await authenticationStateTask).User;
        identityUserId = Int32.Parse(identityUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value);
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    //public async Task ShowFileInfo()
    //{
    //    foreach (var file in await fileReaderReference.EnumerateFilesAsync())
    //    {
    //        using (var ms = await file.CreateMemoryStreamAsync(8192))
    //        {
    //            var byteArray = ms.ToArray();
    //            var fileInfo = await file.ReadFileInfoAsync();
    //            var fileData = new FileDataViewModel();
    //            fileData.ByteArray = byteArray;
    //            fileData.Name = fileInfo.Name;
    //            fileData.Size = fileInfo.Size;
    //            fileData.Byte64String = Convert.ToBase64String(byteArray);
    //            fileData.Type = fileInfo.Type;

    //            using (Image image = Image.Load(ms))
    //            {
    //                fileData.Width = image.Width;
    //                fileData.Height = image.Height;
    //            }

    //            ListFileDataVM.Add(fileData);
    //        }
    //    }
    //}

    public async Task ShowFileInfo()
    {
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            using (var ms = await file.CreateMemoryStreamAsync(8192))
            {

                var fileInfo = await file.ReadFileInfoAsync();

                var fileData = new FileViewModel();
                var byteArray = ms.ToArray();
                fileData.Byte64String = Convert.ToBase64String(byteArray);

                //fileData.File = file;
                fileData.ByteArray = byteArray;
                fileData.Name = fileInfo.Name;
                fileData.Size = fileInfo.Size;

                fileData.Type = fileInfo.Type;

                using (Image image = Image.Load(ms))
                {
                    fileData.Width = image.Width;
                    fileData.Height = image.Height;
                }

                ListFilesVM.Add(fileData);
            }
        }
    }

    public void Resize(FileViewModel fileData, int width, int height)
    {

        using (var ms = new MemoryStream(fileData.ByteArray))
        {
            //fileData.ByteArray
            //var fileInfo = await fileData.File.ReadFileInfoAsync();

            using (Image image = Image.Load(ms))
            {
                image.Mutate(x => x.Resize(image.Width / width, image.Height / height));

                if (fileData.Type.StartsWith(".jp"))
                {
                    image.SaveAsJpeg(ms);
                }
                else
                {
                    image.SaveAsPng(ms);
                }

                //IFileReference fileRef = ;
                //fileRef.OpenReadAsync()
                fileData.Width = image.Width;
                fileData.Height = image.Height;
                //fileData.File = await fileData.File.OpenReadAsync(ms);
            }

            fileData.Size = ms.Length;
            fileData.ByteArray = ms.ToArray();

            StateHasChanged();
        }
    }

    public async Task ClearFile()
    {
        ListFileUploadVM.Clear();
        ListFileDataVM.Clear();
        await fileReaderReference.ClearValue();
    }

    //public async Task UploadFiles()
    //{
    //    this.FileList.Clear();

    //    var multipartFormDataContent = new MultipartFormDataContent();
    //    foreach (var file in await fileReaderReference.EnumerateFilesAsync())
    //    {
    //        multipartFormDataContent.Add(
    //            new StreamContent(await file.OpenReadAsync(), 8192), "files", (await file.ReadFileInfoAsync()).Name);
    //    }

    //    var response = await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
    //    var content = await response.Content.ReadAsStringAsync();
    //    ListFileUploadVM.AddRange(JsonConvert.DeserializeObject<List<FileUploadViewModel>>(content));
    //    await fileReaderReference.ClearValue();
    //}

    public async Task UploadFiles()
    {
        this.FileList.Clear();

        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in ListFilesVM)
        {
            using (var ms = new MemoryStream(file.ByteArray))
            {
                multipartFormDataContent.Add(new StreamContent(ms, 8192), "files", file.Name);
            }
        }

        var response = await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
        var content = await response.Content.ReadAsStringAsync();
        ListFileUploadVM.AddRange(JsonConvert.DeserializeObject<List<FileUploadViewModel>>(content));
        await fileReaderReference.ClearValue();
    }

    public async Task AddArticle()
    {
        NewArticle.Attachments = mapper.Map<List<Attachment>>(ListFileUploadVM);
        NewArticle.AppUserId = identityUserId;
        NewArticle.PublishDate = DateTime.Now;
        var response = await HttpClient.PostJsonAsync<Article>("api/articles/create", NewArticle);
        Toaster.Add($"Объявление успешно опубликовано: {response.Title}", MatToastType.Success, "Успех!");
        NavigationManager.NavigateTo($"article/{response.ArticleId}");
    }

    public string ShowImg(string ext)
    {
        switch (ext)
        {
            case ".doc":
            case ".docx":
                return @"/img/site/word.png";
            case ".xls":
            case ".xlsx":
                return @"/img/site/excel.png";
            case ".pdf":
                return @"/img/site/pdf.png";
            case ".rtf":
                return @"/img/site/rtf.png";
        }

        return String.Empty;
    }

    void OpenDialog(int index)
    {
        FileUploadVM = ListFileUploadVM[index];
        dialogIsOpen = true;
    }

    void UpdateFileUploadVM()
    {
        var vm = ListFileUploadVM.Where(f => f.Name == FileUploadVM.Name).FirstOrDefault();
        var index = ListFileUploadVM.IndexOf(vm);
        ListFileUploadVM[index] = FileUploadVM;
        dialogIsOpen = false;
    }

    void DeleteFileUploadVM()
    {
        var vm = ListFileUploadVM.Where(f => f.Name == FileUploadVM.Name).FirstOrDefault();
        ListFileUploadVM.Remove(vm);
        dialogIsOpen = false;
    }

}
