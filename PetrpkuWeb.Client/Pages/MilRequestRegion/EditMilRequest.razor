@page "/milrequest/edit/{MilRequestId:int}"

@attribute [Authorize(Roles = AuthRoles.ADMIN_KADRY_USER)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMatToaster Toaster


@if (milRequest is { })
{
    @if (milRequest.IsReadonly)
    {
        <div class="alert alert-danger" role="alert">
            заявка согласована, отправлена и недоступна для редактирования!
        </div>
    }
    else
    {
        @if (authUserId == milRequest.AppUserView.Id || authUser.IsInRole(AuthRoles.ADMIN))
        {
            <h2 class="col-12 mb-4 text-center">Редактировать заявку на официальный сайт</h2>

            <EditForm Model="milRequest" OnInvalidSubmit="@(() => Toaster.Add("Для формирования заявки необходимо заполнить разделы сайта и поле с описанием действий", MatToastType.Danger, "Ошибка!"))">
                <div class="row">
                    <div class="col-12 mb-2">
                        <DataAnnotationsValidator />
                    </div>

                    @if (siteSections is null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <div class="row col-12 mb-2">
                            <div class="col-8">
                                <input type="text" class="form-control" placeholder="@milRequest.SiteSectionView.Name" readonly>
                            </div>
                            <div class="col-4">
                                <select class="custom-select" @onchange="@SectionClicked">
                                    <option selected>--- Выберите раздел сайта ---</option>
                                    @foreach (var siteSection in siteSections)
                                    {
                                        <option value="@siteSection.SiteSectionId">@siteSection.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row col-12 mb-2">
                            <div class="col-8">
                                <input type="text" class="form-control" placeholder="@milRequest.SiteSubSectionView.Title" readonly>
                            </div>
                            <div class="col-4">
                                <select class="custom-select" @onchange="@SubsectionClicked">
                                    <option selected>--- Выберите подраздел сайта ---</option>
                                    @if (siteSubSections is { })
                                    {
                                        @foreach (var subsection in siteSubSections)
                                        {
                                            <option value="@subsection.SiteSubSectionId">@subsection.Title</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    }

                    <div class="form-group col-12 mb-2">
                        <label>Опишите, что необходимо сделать (заменить, добавить, удалить...)</label>
                        <div class="col-12 mb-2">
                            <textarea class="form-control" rows="5" @bind="milRequest.ToDo"></textarea>
                            <ValidationMessage For="() => milRequest.ToDo" />
                        </div>
                    </div>

                    <div class="form-group col-12 mb-2">
                        <label>Заголовок новости/материала (при необходимости)</label>
                        <input class="form-control" type="text" @bind="@milRequest.Title">
                        <ValidationMessage For="() => milRequest.Title" />
                    </div>

                    <div class="form-group col-12 mb-2">
                        <label>Текст новости/материала (при необходимости)</label>
                        <div class="col-12 mb-2">
                            <textarea class="form-control" rows="15" @bind="milRequest.Content"></textarea>
                            <ValidationMessage For="() => milRequest.Content" />
                        </div>
                    </div>

                    <table class="table">
                        @foreach (var attachment in milRequest.AttachmentsView)
                        {
                            var index = milRequest.AttachmentsView.IndexOf(attachment);
                            <tr @key="attachment">
                                <td>@(milRequest.AttachmentsView.IndexOf(attachment) + 1)</td>
                                @if (attachment.IsImage == true)
                                {
                                    <td><a class="spotlight" href="@attachment.Path"><img src="@CssExtension.Img(attachment.Extension)" /></a></td>
                                }
                                else
                                {
                                    <td><img src="@CssExtension.Img(attachment.Extension)" /></td>
                                }
                                <td>@attachment.Description</td>
                                <td>@attachment.Name</td>
                                <td>@attachment.Length</td>
                                <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenDialog(attachment.AttachmentId))" Label="Редактировать" /></td>
                            </tr>
                        }
                    </table>

                    <div class="col-12 mb-2">
                        <MatButton Raised="true" Icon="done" Type="submit" Label="Сохранить" OnClick="UpdateMessage" Class="float-right" />
                        <MatButton Raised="true" Icon="delete_outline" Label="Удалить" OnClick="DeleteMessage" Class="float-right mr-2" />
                    </div>
                </div>
            </EditForm>

            <br />

            <div class="alert alert-danger" role="alert">
                <h4 class="alert-heading">Добавьте файлы для загрузки</h4>
                <p>Если необходимо добавить несколько файлов удерживайте нажатой клавишу Ctrl.</p>

                @if (ListFileInfoVM.Any())
                {
                    <table class="table">
                        @foreach (var fileInfo in ListFileInfoVM)
                        {
                            <tr @key="fileInfo">
                                <td>@(ListFileInfoVM.IndexOf(fileInfo) + 1)</td>
                                <td><img src="@CssExtension.Img(fileInfo.Type)" /></td>
                                <td>@fileInfo.Name</td>
                                <td>@fileInfo.Size</td>
                            </tr>
                        }

                    </table>
                    <div class="col-12">
                        <button @onclick="ClearFileInfo" class="btn btn-primary mr-2">Очистить</button>
                        <button @onclick="UploadFiles" class="btn btn-primary">Загрузить файлы</button>
                    </div>
                }

                <hr>
                <input type="file" accept="@StringExtension.ACCEPT_ALL_FILES" multiple @ref="inputElement" @onchange="ShowFileInfo" />
            </div>

        }
        else
        {
            <div class="row">
                <MatButton Outlined="true" Link="/dashboard" Label="реестр" Icon="home" />
            </div>
        }
    }
}


<EditForm Model="@CurrentAttachment">
    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>"@CurrentAttachment.Name</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Описание" @bind-Value="@CurrentAttachment.Description"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="save" OnClick="DeleteAttachment" Label="Удалить" />
            <MatButton Icon="save" Type="submit" OnClick="UpdateAttachmentInfo" Label="Сохранить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@code {

    [Parameter]
    public int MilRequestId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private AttachmentView CurrentAttachment { get; set; } = new AttachmentView();
    private List<FileInfoViewModel> ListFileInfoVM { get; set; } = new List<FileInfoViewModel>();

    List<SiteSectionView> siteSections;
    List<SiteSubSectionView> siteSubSections;

    string siteSectionId;
    string siteSubSectionId;

    MilRequestView milRequest;

    ClaimsPrincipal authUser;
    string authUserId;

    ElementReference inputElement;
    IFileReaderRef fileReaderReference;

    bool dialogIsOpen = false;


    protected override async Task OnInitializedAsync()
    {
        authUser = (await authenticationStateTask).User;
        authUserId = authUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value;

        siteSections = await HttpClient.GetJsonAsync<List<SiteSectionView>>(ApiRoutes.Sections.ALL);
    }

    protected override async Task OnParametersSetAsync()
    {
        milRequest = await HttpClient.GetJsonAsync<MilRequestView>($"{ApiRoutes.MilRequest.SHOW}/{MilRequestId}");
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    async Task UpdateMessage()
    {
        milRequest.AppUserView.Id = authUserId;
        await HttpClient.PutJsonAsync<MilRequestView>($"{ApiRoutes.MilRequest.UPDATE}/{milRequest.MilRequestId}", milRequest);
        NavigationManager.NavigateTo("/dashboard");

        Toaster.Add($"Заявка успешно обновлена", MatToastType.Success, "Успех!");
    }

    async Task DeleteMessage()
    {
        await HttpClient.DeleteAsync($"{ApiRoutes.MilRequest.DELETE}/{milRequest.MilRequestId}");
        NavigationManager.NavigateTo("/dashboard");

        Toaster.Add($"Заявка удалена", MatToastType.Warning, "Внимание!");
    }

    void OpenDialog(int attachmentId)
    {
        CurrentAttachment = milRequest.AttachmentsView.Where(a => a.AttachmentId == attachmentId).FirstOrDefault();

        dialogIsOpen = true;
    }

    async Task ShowFileInfo()
    {
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();

            var fileData = new FileInfoViewModel();
            fileData.Name = fileInfo.Name;
            fileData.Size = fileInfo.Size;
            fileData.Type = fileInfo.Type;
            ListFileInfoVM.Add(fileData);
        }
    }

    async Task ClearFileInfo()
    {
        ListFileInfoVM.Clear();
        await fileReaderReference.ClearValue();
    }

    async Task UploadFiles()
    {
        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192), "files", (await file.ReadFileInfoAsync()).Name);
        }

        var response = await HttpClient.PostAsync(requestUri: ApiRoutes.Upload.FILES, content: multipartFormDataContent);
        var content = await response.Content.ReadAsStringAsync();
        milRequest.AttachmentsView.AddRange(JsonConvert.DeserializeObject<List<AttachmentView>>(content));

        await ClearFileInfo();
    }

    async Task UpdateAttachmentInfo()
    {
        CurrentAttachment = await HttpClient.PutJsonAsync<AttachmentView>($"{ApiRoutes.Upload.UPDATE}/{CurrentAttachment.AttachmentId}", CurrentAttachment);
        dialogIsOpen = false;

        Toaster.Add($"Информация для файла {CurrentAttachment.Name} успешно обновлена", MatToastType.Success, "Успех!");
    }

    async Task DeleteAttachment()
    {
        await HttpClient.DeleteAsync($"{ApiRoutes.Upload.DELETE}/{CurrentAttachment.AttachmentId}");
        milRequest.AttachmentsView.Remove(CurrentAttachment);
        dialogIsOpen = false;

        Toaster.Add($"Файл {CurrentAttachment.Name} удален", MatToastType.Warning, "Внимание!");
    }

    async Task SectionClicked(ChangeEventArgs sectionEvent)
    {
        //siteSubsections.Clear();
        siteSectionId = sectionEvent.Value.ToString();
        milRequest.SiteSectionView = siteSections.Find(s => s.SiteSectionId == int.Parse(siteSectionId));
        siteSubSections = await HttpClient.GetJsonAsync<List<SiteSubSectionView>>($"{ApiRoutes.Sections.SUBSECTIONS}/{siteSectionId}");
        this.StateHasChanged();
    }

    void SubsectionClicked(ChangeEventArgs subSectionEvent)
    {
        siteSubSectionId = subSectionEvent.Value.ToString();
        milRequest.SiteSubSectionView = siteSubSections.Find(ss => ss.SiteSubSectionId == int.Parse(siteSubSectionId));
        this.StateHasChanged();
    }
}
