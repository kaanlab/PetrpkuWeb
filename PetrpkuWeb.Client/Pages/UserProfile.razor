@page "/user/{AppUserId:int}"

@attribute [Authorize(Roles = "admin_webportal, user_webportal, kadry_webportal")]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject IFileReaderService fileReaderService


<div class="row">
    @if (user is { })
    {
        @if (identityUserId == user.AppUserId)
        {
            <div class="col-4">
                <div class="card">
                    <img src="@user.Avatar.Path" class="card-img-top">
                    <div class="card-body">
                        <h5 class="card-title">@user.DisplayName</h5>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item"><MatIcon Icon="notification_important" /><span class="ml-2">@user.Birthday.ToShortDateString()</span></li>
                        <li class="list-group-item"><MatIcon Icon="face" /><span class="ml-2">@user.LastName @user.FirstName @user.MidleName</span></li>
                        <li class="list-group-item"><MatIcon Icon="work" /><span class="ml-2">@user.Department.Name</span></li>
                        <li class="list-group-item"><MatIcon Icon="business_center" /><span class="ml-2">@user.WorkingPosition</span></li>
                        <li class="list-group-item"><MatIcon Icon="location_city" /><span class="ml-2">@user.Building.Name</span></li>
                        <li class="list-group-item"><MatIcon Icon="meeting_room" /><span class="ml-2">@user.Room</span></li>
                        <li class="list-group-item"><MatIcon Icon="contact_phone" /><span class="ml-2">@user.IntPhone</span></li>
                        <li class="list-group-item"><MatIcon Icon="phone" /><span class="ml-2">@user.ExtPhone</span></li>
                        <li class="list-group-item"><MatIcon Icon="phone_iphone" /><span class="ml-2">@user.MobPhone</span></li>
                    </ul>
                    <div class="card-body">
                        <span class="ml-3"><MatButton Outlined="true" Icon="edit" OnClick="@OpenDialog" Label="Редактировать" /></span>
                    </div>
                </div>
            </div>
            <div class="col-4 border-right">

                @if (user.Articles.Any())
                {
                    <h3 class="text-center">Мои объявления</h3>

                    @foreach (var article in user.Articles.OrderByDescending(d => d.PublishDate))
                    {
                        <div class="card @CssExtension.Border(article) mb-2">
                            <div class="card-body @CssExtension.Text(article)">
                                <h5 class="card-title">@article.Title</h5>
                                <p class="card-text">@article.Content</p>
                            </div>
                            <div class="card-footer">
                                <div class="row">
                                    <div class="col-6">
                                        <p class="card-text"><small class="text-muted"> @article.PublishDate</small></p>
                                    </div>
                                    @if (article.Attachments.Any())
                                    {
                                        <div class="col-4">
                                            <small class="text-muted">Файлы: <span class="badge badge-pill badge-secondary">@article.Attachments.Count()</span></small>
                                        </div>
                                    }
                                
                                    <MatButton Icon="remove_red_eye" Link="@($"/article/show/{article.ArticleId}")" />
                                    <MatButton Icon="edit" Link="@($"/article/edit/{article.ArticleId}")" />
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="col-4">
                @if (user.DaysOfDuty.Any())
                {

                    <h3 class="text-center">Мои дежурства</h3>
                    <table class="table table-striped">
                        @foreach (var duty in user.DaysOfDuty.OrderByDescending(d => d.DayOfDuty))
                        {
                            <tr>
                                <td>@duty.DayOfDuty.ToShortDateString()</td>
                            </tr>
                        }
                    </table>
                }
            </div>
        }
        else
        {
            <div class="row">
                <MatButton Outlined="true" Link="/" Label="На главную" Icon="home" />
            </div>
        }
    }
</div>
<div class="row" style="height: 10px;"></div>

@if (user is { })
{
    <EditForm Model="@user">
        <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>Профиль @user.DisplayName</MatDialogTitle>
            <MatDialogContent>
                <img src="@user.Avatar.Path" />
                <div class="alert alert-danger" role="alert">
                    Для профиля желательно изображение размером 400х400px!
                    @if (ListFileInfoVM.Any())
                    {
                        <table class="table">
                            @foreach (var fileInfo in ListFileInfoVM)
                            {
                                <tr>
                                    <td>@(ListFileInfoVM.IndexOf(fileInfo) + 1)</td>
                                    <td><img src="@CssExtension.Img(fileInfo.Type)" /></td>
                                    <td>@fileInfo.Name</td>
                                    <td>@fileInfo.Size</td>
                                </tr>
                            }
                        </table>
                        <div class="row">
                            <button @onclick="ClearFileInfo" class="btn btn-primary">Очистить</button>
                            <button @onclick="UploadFiles" class="btn btn-primary">Загрузить файлы</button>
                        </div>
                    }
                </div>
                <input type="file" accept="image/jpeg, image/png" @ref="inputElement" />
                <MatButton OnClick="ShowFileInfo" Disabled="@(ListFileInfoVM.Any())" Label="Добавить" />
                <MatTextField Label="Фамилия" @bind-Value="@user.LastName"></MatTextField>
                <MatTextField Label="Имя" @bind-Value="@user.FirstName"></MatTextField>
                <MatTextField Label="Отчество" @bind-Value="@user.MidleName"></MatTextField>
                <MatTextField Label="Мобильный телефон" @bind-Value="@user.MobPhone"></MatTextField>
                <label>День рождения</label>
                <InputDate @bind-Value="@user.Birthday"></InputDate>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
                <MatButton Icon="save" Type="submit" OnClick="@OkClick" Label="Сохранить" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

@code {

    [Parameter]
    public int AppUserId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Attachment> listOfAttachments { get; set; } = new List<Attachment>();
    private List<FileInfoViewModel> ListFileInfoVM { get; set; } = new List<FileInfoViewModel>();

    AppUser user;
    int identityUserId;
    bool dialogIsOpen = false;

    ElementReference inputElement;
    IFileReaderRef fileReaderReference;


    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    protected override async Task OnInitializedAsync()
    {
        user = await HttpClient.GetJsonAsync<AppUser>($"api/users/user/{AppUserId}");

        var identityUser = (await authenticationStateTask).User;
        identityUserId = Int32.Parse(identityUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value);
    }

    async Task ShowFileInfo()
    {
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();

            var fileData = new FileInfoViewModel();
            fileData.Name = fileInfo.Name;
            fileData.Size = fileInfo.Size;
            fileData.Type = fileInfo.Type;
            ListFileInfoVM.Add(fileData);
        }
    }

    async Task ClearFileInfo()
    {
        ListFileInfoVM.Clear();
        await fileReaderReference.ClearValue();
    }

    void OpenDialog()
    {
        dialogIsOpen = true;
    }

    async Task OkClick()
    {
        dialogIsOpen = false;
        await HttpClient.PutJsonAsync<AppUser>($"api/users/user/update/{user.AppUserId}", user);
    }

    async Task UploadFiles()
    {
        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192), "files", (await file.ReadFileInfoAsync()).Name);
        }

        var response = await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
        var content = await response.Content.ReadAsStringAsync();
        listOfAttachments.AddRange(JsonConvert.DeserializeObject<List<Attachment>>(content));
        user.Avatar = listOfAttachments.FirstOrDefault();
        await ClearFileInfo();
    }
}

