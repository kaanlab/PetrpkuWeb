@page "/user/{appUserId}"

@inject HttpClient HttpClient

<div class="row">
    @if (user != null)
    {
        <div class="col-4">
            <MatCard class="demo-mat-card">
                <MatCardContent>
                    <MatCardMedia Wide="true" ImageUrl=@user.PhotoUrl></MatCardMedia>
                    <div class="demo-mat-card-content">
                        <MatHeadline6 class="demo-mat-card-clean-margin">
                            @user.DisplayName
                        </MatHeadline6>
                        <MatSubtitle2 class="demo-mat-card-clean-margin">
                            @user.LastName
                        </MatSubtitle2>
                    </div>

                    <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                        @user.WorkingPosition
                    </MatBody2>
                </MatCardContent>
                <MatCardActions>
                    <MatCardActionButtons>
                        <MatButton Outlined="true" Icon="edit" OnClick="@(e => { dialogIsOpen = true; })" Label="Редактировать" />
                    </MatCardActionButtons>
                </MatCardActions>
            </MatCard>
        </div>
        <div class="col-4">
            @if (user.IsDuty)
            {

                @foreach (var duty in user.DaysOfDuty)
                {
                    <h2>Мои дежурства</h2>
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">Ф.И.О</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tr>
                            <td>@duty.DayOfDuty.ToShortDateString()</td>
                        </tr>
                    </table>
                }

            }
        </div>
        <div class="col-4">
            @if (user.Articles.Any())
            {
                @foreach (var article in user.Articles)
                {
                    <h2>Мои новости</h2>
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col"></th>
                                <th scope="col"></th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tr>
                            <td>@article.Title</td>
                            <td>@article.Content</td>
                            <td>@article.PublishDate.ToShortDateString()</td>
                        </tr>
                    </table>
                }
            }
        </div>
    }
</div>

@if (user != null)
{
    <EditForm Model="@user">
        <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>День рождения @user.DisplayName</MatDialogTitle>
            <MatDialogContent>
                <p>Укажите должность</p>
                <InputText @bind-Value="@user.FirstName"></InputText>
                <InputText @bind-Value="@user.LastName"></InputText>
                <InputText @bind-Value="@user.MidleName"></InputText>
                <InputText @bind-Value="@user.WorkingPosition"></InputText>
                <p>Выберите дату</p>
                <InputDate @bind-Value="@user.Birthday"></InputDate>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
                <MatButton Icon="save" Type="submit" OnClick="@OkClick" Label="Сохранить" />
            </MatDialogActions>
        </MatDialog>
    </EditForm>
}

@code {

    [Parameter]
    public string AppUserId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private AppUser user;
    //private int identityUserId = 0;
    bool dialogIsOpen = false;

    protected override async Task OnInitializedAsync()
    {
        user = await HttpClient.GetJsonAsync<AppUser>($"api/users/{AppUserId}");

        var identityUser = (await authenticationStateTask).User;
        //identityUserId = Int32.Parse(identityUser.Claims.Where(c => c.Type == ClaimTypes.UserData).Select(c => c.Value).FirstOrDefault());

    }

    async Task OkClick()
    {
        dialogIsOpen = false;
        await HttpClient.PutJsonAsync<AppUser>($"api/users/update/{user.AppUserId}", user);

    }
}
