@page "/upload"

@using System.IO
@inject HttpClient HttpClient
@inject IFileReaderService fileReaderService

<h1>Hello, dropped files!</h1>

Welcome to your new filestreaming app.
<br />
This demo reads files that was dropped in without doing anything particular with it.
<br />
<br />
<style>
    .@dropTargetClass {
        display:block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
    }
    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }
</style>

<div class="@DropClass"
     @ref=dropTargetElement
     @ondrop=OnDrop
     @ondragenter=OnDragEnter
     @ondragleave=OnDragLeave>
    Drop Files here.
    @foreach (var fileInfo in FileList)
    {
        <br />@fileInfo.Name
    }
</div>
<br />


<button @onclick="ClearFile" class="btn btn-primary">Clear</button>
<button @onclick="UploadFiles" class="btn btn-primary">Upload</button>


@code {
    ElementReference dropTargetElement;
    IFileReaderRef dropReference;



    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string>
    _dropClasses = new List<string>() { dropTargetClass };

    string DropClass => string.Join(" ", _dropClasses);
    List<IFileInfo> FileList { get; } = new List<IFileInfo>();
   


    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        dropReference = fileReaderService.CreateReference(dropTargetElement);
        await dropReference.RegisterDropEventsAsync();
    }

    
    public async Task ClearFile()
    {
        await dropReference.ClearValue();
        await this.RefreshFileList();
    }

    public void OnDragEnter(EventArgs e)
    {
        _dropClasses.Add(dropTargetDragClass);
    }

    public void OnDragLeave(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnDrop(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshFileList();
    }

    private async Task RefreshFileList()
    {
        this.FileList.Clear();
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            this.FileList.Add(fileInfo);
        }
        this.StateHasChanged();
    }

    public async Task UploadFiles()
    {

        var multipartFormDataContent = new MultipartFormDataContent();

        foreach (var file in await dropReference.EnumerateFilesAsync())
        {

            var fileInfo = await file.ReadFileInfoAsync();
            var fileName = fileInfo.Name;

            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync())
            {
                byte[] bytes = memoryStream.ToArray();
                var fileContent = new ByteArrayContent(bytes);
                multipartFormDataContent.Add(fileContent, fileName, fileName);
            }
        }

        await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
    }
}
