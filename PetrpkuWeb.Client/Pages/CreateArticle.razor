@page "/createarticle"

@using Newtonsoft.Json
@using System.IO
@using AutoMapper

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMapper mapper


<h1>Создать объявление</h1>

<div class="row">
    <div class="col-6">
        <EditForm Model="NewArticle">
            <div class="col-12 mb-2">
                <MatTextField Label="Заголовок" @bind-Value="@NewArticle.Title"></MatTextField>
            </div>
            <div class="col-12 mb-2">
                <MatTextField Label="Текст" TextArea="true" @bind-Value="@NewArticle.Content"></MatTextField>
            </div>
            <div class="col-12 mb-2">
                @if (ListFileUploadVM.Any())
                {
                    var rand = new Random();
                    <div class="img-container">
                        @foreach (var file in ListFileUploadVM)
                        {
                            @if (file.Extension.StartsWith(".jp") || file.Extension.StartsWith(".pn"))
                            {
                                int index = rand.Next(imgCssClass.Length);
                                <div class="@imgCssClass[index]">
                                    <img src="@file.Path" />
                                </div>
                            }
                        }
                    </div>
                    <table class="table">
                        @foreach (var file in ListFileUploadVM)
                        {
                            @if (file.Extension.StartsWith(".doc") || file.Extension.StartsWith(".xls") || file.Extension.StartsWith(".rtf") || file.Extension.StartsWith(".pdf"))
                            {
                                var index = ListFileUploadVM.IndexOf(file);
                                <tr>
                                    <td>@(ListFileUploadVM.IndexOf(file) + 1)</td>
                                    <td><img src="@ShowImg(file.Extension)" /></td>
                                    <td>@file.Description</td>
                                    <td>@file.Name</td>
                                    <td>@file.Length</td>
                                    <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenDialog(index))" Label="Редактировать" /></td>
                                </tr>
                            }
                        }
                    </table>
                }
            </div>
            <div class="col-12 mb-2">
                <MatButton Raised="true" Icon="add" Type="submit" Label="Добавить новость" OnClick="@AddArticle" />
            </div>
        </EditForm>
    </div>

    <div class="col-6 mb-2">
        <input type="file" accept="image/jpeg, image/png, application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, text/plain, application/pdf" multiple @ref="inputElement" />

        <div class="alert alert-danger" role="alert">
            Список файлов для загрузки
        </div>

        <button @onclick="ClearFile" class="btn btn-primary">Очистить</button>
        <button @onclick="UploadFiles" class="btn btn-primary">Загрузить файлы</button>
    </div>
</div>

<EditForm Model="@FileUploadVM">
    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>"@FileUploadVM.Name</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Фамилия" @bind-Value="@FileUploadVM.Description"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="save" OnClick="@DeleteFileUploadVM" Label="Удалить" />
            <MatButton Icon="save" Type="submit" OnClick="@UpdateFileUploadVM" Label="Сохранить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private int identityUserId;

    Article NewArticle { get; set; } = new Article();
    List<FileUploadViewModel> ListFileUploadVM { get; set; } = new List<FileUploadViewModel>();
    List<IFileInfo> FileList { get; } = new List<IFileInfo>();

    FileUploadViewModel FileUploadVM { get; set; } = new FileUploadViewModel();
    bool dialogIsOpen = false;

    ElementReference inputElement;
    IFileReaderRef fileReaderReference;

    string[] imgCssClass = { "big", "vertical", String.Empty };
    string Description = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        var identityUser = (await authenticationStateTask).User;
        identityUserId = Int32.Parse(identityUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value);
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    public async Task ClearFile()
    {
        ListFileUploadVM.Clear();
        await fileReaderReference.ClearValue();
    }

    public async Task UploadFiles()
    {
        this.FileList.Clear();

        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192), "files", (await file.ReadFileInfoAsync()).Name);
        }

        var response = await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
        var content = await response.Content.ReadAsStringAsync();
        ListFileUploadVM.AddRange(JsonConvert.DeserializeObject<List<FileUploadViewModel>>(content));
        await fileReaderReference.ClearValue();
    }

    public async Task AddArticle()
    {
        NewArticle.Attachments = mapper.Map<List<Attachment>>(ListFileUploadVM);
        NewArticle.AppUserId = identityUserId;
        NewArticle.PublishDate = DateTime.Now;
        var res = await HttpClient.PostJsonAsync<Article>("api/articles/create", NewArticle);
        NavigationManager.NavigateTo($"article/{res.ArticleId}");
    }

    public string ShowImg(string ext)
    {
        switch (ext)
        {
            case ".doc":
            case ".docx":
                return @"/img/site/word.png";
            case ".xls":
            case ".xlsx":
                return @"/img/site/excel.png";
            case ".pdf":
                return @"/img/site/pdf.png";
            case ".rtf":
                return @"/img/site/rtf.png";
        }

        return String.Empty;
    }

    void OpenDialog(int index)
    {
        FileUploadVM = ListFileUploadVM[index];
        dialogIsOpen = true;
    }

    void UpdateFileUploadVM()
    {
        var vm = ListFileUploadVM.Where(f => f.Name == FileUploadVM.Name).FirstOrDefault();
        ListFileUploadVM.Remove(vm);
        ListFileUploadVM.Add(FileUploadVM);
        dialogIsOpen = false;
    }

    void DeleteFileUploadVM()
    {
        var vm = ListFileUploadVM.Where(f => f.Name == FileUploadVM.Name).FirstOrDefault();
        ListFileUploadVM.Remove(vm);
        dialogIsOpen = false;
    }

}
