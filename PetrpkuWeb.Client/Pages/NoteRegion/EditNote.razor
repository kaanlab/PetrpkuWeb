@page "/article/edit/{ArticleId:int}"

@attribute [Authorize(Roles = AuthRole.ANY)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMatToaster Toaster


@if (article is { })
{
    @if (identityUserId == article.Author.AppUserId || identityUser.IsInRole(AuthRole.ADMIN))
    {
        <h2 class="col-12 mb-4 text-center">Редактировать объявление</h2>

        <EditForm Model="article" OnInvalidSubmit="@(() => Toaster.Add(" Для публикации необходимо заполнить поля заголовок и текст", MatToastType.Danger, "Ошибка!"))">
            <div class="row">
                <div class="col-12 mb-2">
                    <DataAnnotationsValidator />
                </div>

                <div class="form-group col-12 mb-2">
                    <select class="custom-select" @bind="article.CssTypeId">
                        @if (cssTypes is null)
                        {
                            <option selected>(loading...)</option>
                        }
                        else
                        {
                            <option selected>--- Выберите важность сообщения ---</option>
                            @foreach (var cssType in cssTypes)
                            {
                                <option value="@cssType.CssTypeId">@cssType.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group col-12 mb-2">
                    <label>Заголовок</label>
                    <input class="form-control" type="text" @bind-value="@article.Title">
                    <ValidationMessage For="() => article.Title" />
                </div>

                <div class="form-group col-12 mb-2">
                    <label>Аннотация</label>
                    <input class="form-control" type="text" placeholder=@article.Content.Truncate(200) readonly>
                </div>

                <div class="form-group col-12 mb-2">
                    <label>Текст</label>
                    <div class="row">
                        <div class="col-6">
                            <textarea class="form-control" rows="15" @bind-value="article.Content" @bind-value:event="oninput"></textarea>
                            <ValidationMessage For="() => article.Content" />
                        </div>
                        <div class="col-6 alert alert-info mb-0" role="alert">
                            <MarkdownView Content="@article.Content" />
                        </div>
                    </div>
                </div>

                @if (article.Attachments.Any())
                {
                    <div class="form-group col-12 mb-2">
                        <label>Вложения</label>
                        <table class="table">
                            @foreach (var attachment in article.Attachments)
                            {
                                var index = article.Attachments.IndexOf(attachment);
                                <tr @key="attachment">
                                    <td>@(article.Attachments.IndexOf(attachment) + 1)</td>
                                    @if (attachment.IsImage == true)
                                    {
                                        <td><a class="spotlight" href="@attachment.Path"><img src="@CssExtension.Img(attachment.Extension)" /></a></td>
                                    }
                                    else
                                    {
                                        <td><img src="@CssExtension.Img(attachment.Extension)" /></td>
                                    }
                                    <td>@attachment.Description</td>
                                    <td>@attachment.Name</td>
                                    <td>@attachment.Length</td>
                                    <td><MatButton Outlined="true" Icon="edit" OnClick="@(() => OpenDialog(attachment.AttachmentId))" Label="Редактировать" /></td>
                                </tr>
                            }
                        </table>
                    </div>
                }


                <div class="form-group col-12 mb-2">
                    <MatButton Raised="true" Icon="done" Type="submit" Label="Сохранить" OnClick="UpdateArticle" Class="float-right" />
                    <MatButton Raised="true" Icon="delete_outline" Label="Удалить" OnClick="DeleteArticle" Class="float-right mr-2" />

                </div>

                <br />

                <div class="col-12 mb-2">
                    <div class="alert alert-secondary" role="alert">
                        <h4 class="alert-heading">Добавьте файлы для загрузки</h4>
                        <p>Если необходимо добавить несколько файлов удерживайте нажатой клавишу Ctrl.</p>

                        @if (ListFileInfoVM.Any())
                        {
                            <table class="table">
                                @foreach (var fileInfo in ListFileInfoVM)
                                {
                                    <tr @key="fileInfo">
                                        <td>@(ListFileInfoVM.IndexOf(fileInfo) + 1)</td>
                                        <td><img src="@CssExtension.Img(fileInfo.Type)" /></td>
                                        <td>@fileInfo.Name</td>
                                        <td>@fileInfo.Size</td>
                                    </tr>
                                }

                            </table>
                            <div class="col-12">
                                <button @onclick="ClearFileInfo" class="btn btn-primary mr-2">Очистить</button>
                                <button @onclick="UploadFiles" class="btn btn-primary">Загрузить файлы</button>
                            </div>
                        }

                        <hr>
                        <input type="file" accept="@StringExtension.ACCEPT_ALL_FILES" multiple @ref="inputElement" @onchange="ShowFileInfo" />
                    </div>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <MatButton Outlined="true" Link="/" Label="На главную" Icon="home" />
        </div>
    }
}

<EditForm Model="@CurrentAttachment">
    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>"@CurrentAttachment.Name</MatDialogTitle>
        <MatDialogContent>
            <MatTextField Label="Описание" @bind-Value="@CurrentAttachment.Description"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Icon="undo" OnClick="@(e => { dialogIsOpen = false; })" Label="Отмена" />
            <MatButton Icon="save" OnClick="DeleteAttachment" Label="Удалить" />
            <MatButton Icon="save" Type="submit" OnClick="UpdateAttachmentInfo" Label="Сохранить" />
        </MatDialogActions>
    </MatDialog>
</EditForm>

@code {

    [Parameter]
    public int ArticleId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Attachment CurrentAttachment { get; set; } = new Attachment();
    private List<FileInfoViewModel> ListFileInfoVM { get; set; } = new List<FileInfoViewModel>();

    Article article;
    ClaimsPrincipal identityUser;
    List<CssType> cssTypes;
    int identityUserId;

    ElementReference inputElement;
    IFileReaderRef fileReaderReference;

    string[] imgCssClass = { "big", "vertical", String.Empty };
    bool dialogIsOpen = false;


    protected override async Task OnInitializedAsync()
    {
        identityUser = (await authenticationStateTask).User;
        identityUserId = Int32.Parse(identityUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value);
        cssTypes = await HttpClient.GetJsonAsync<List<CssType>>("api/csstype/all");
    }

    protected override async Task OnParametersSetAsync()
    {
        article = await HttpClient.GetJsonAsync<Article>($"api/articles/show/{ArticleId}");
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    async Task UpdateArticle()
    {
        article.AppUserId = identityUserId;
        await HttpClient.PutJsonAsync<Article>($"api/articles/update/{article.ArticleId}", article);
        Toaster.Add($"Объявление успешно обновлено", MatToastType.Success, "Успех!");
        NavigationManager.NavigateTo("/");
    }

    async Task DeleteArticle()
    {
        await HttpClient.DeleteAsync($"api/articles/delete/{article.ArticleId}");
        Toaster.Add($"Новость {article.Title} удалена", MatToastType.Warning, "Внимание!");
        NavigationManager.NavigateTo("/");
    }

    void OpenDialog(int attachmentId)
    {
        CurrentAttachment = article.Attachments.Where(a => a.AttachmentId == attachmentId).FirstOrDefault();

        dialogIsOpen = true;
    }

    async Task ShowFileInfo()
    {
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();

            var fileData = new FileInfoViewModel();
            fileData.Name = fileInfo.Name;
            fileData.Size = fileInfo.Size;
            fileData.Type = fileInfo.Type;
            ListFileInfoVM.Add(fileData);
        }
    }

    async Task ClearFileInfo()
    {
        ListFileInfoVM.Clear();
        await fileReaderReference.ClearValue();
    }

    async Task UploadFiles()
    {
        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192), "files", (await file.ReadFileInfoAsync()).Name);
        }

        var response = await HttpClient.PostAsync(requestUri: "api/upload/files", content: multipartFormDataContent);
        var content = await response.Content.ReadAsStringAsync();
        article.Attachments.AddRange(JsonConvert.DeserializeObject<List<Attachment>>(content));

        await ClearFileInfo();
    }

    async Task UpdateAttachmentInfo()
    {
        CurrentAttachment = await HttpClient.PutJsonAsync<Attachment>($"api/upload/updateinfo/{CurrentAttachment.AttachmentId}", CurrentAttachment);
        Toaster.Add($"Информация для файла {CurrentAttachment.Name} успешно обновлена", MatToastType.Success, "Успех!");

        dialogIsOpen = false;
    }

    async Task DeleteAttachment()
    {
        await HttpClient.DeleteAsync($"api/upload/deleteinfo/{CurrentAttachment.AttachmentId}");
        article.Attachments.Remove(CurrentAttachment);
        Toaster.Add($"Файл {CurrentAttachment.Name} удален", MatToastType.Warning, "Внимание!");

        dialogIsOpen = false;
    }
}
