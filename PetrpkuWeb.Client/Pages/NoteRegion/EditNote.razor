@page "/note/edit/{NoteId:int}"

@attribute [Authorize(Roles = AuthRoles.ADMIN_KADRY_USER)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMatToaster Toaster


@if (note is { })
{
    @if (authUserId == note.AppUserViewModel.Id || authUser.IsInRole(AuthRoles.ADMIN))
    {
        <h2 class="col-12 mb-4 text-center">Редактировать объявление</h2>

        <EditForm Model="note" OnInvalidSubmit="@(() => Toaster.Add(" Для публикации необходимо заполнить поля заголовок и текст", MatToastType.Danger, "Ошибка!"))">
            <div class="row">
                <div class="col-12 mb-2">
                    <DataAnnotationsValidator />
                </div>

                <div class="form-group col-12 mb-2">
                    <select class="custom-select" @bind="note.CssTypeViewModel.CssTypeId">
                        @if (cssTypes is null)
                        {
                            <option selected>(loading...)</option>
                        }
                        else
                        {
                            <option selected>--- Выберите важность сообщения ---</option>
                            @foreach (var cssType in cssTypes)
                            {
                                <option value="@cssType.CssTypeId">@cssType.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group col-12 mb-2">
                    <label>Заголовок</label>
                    <input class="form-control" type="text" @bind-value="@note.Title">
                    <ValidationMessage For="() => note.Title" />
                </div>

                <div class="form-group col-12 mb-2">
                    <label>Текст</label>
                    <div class="row">
                        <div class="col-6">
                            <textarea class="form-control" rows="15" @bind-value="note.Content" @bind-value:event="oninput"></textarea>
                            <ValidationMessage For="() => note.Content" />
                        </div>
                    </div>
                </div>

                <div class="form-group col-12 mb-2">
                    <MatButton Raised="true" Icon="done" Type="submit" Label="Сохранить" OnClick="UpdateNote" Class="float-right" />
                    <MatButton Raised="true" Icon="delete_outline" Label="Удалить" OnClick="DeleteNote" Class="float-right mr-2" />
                </div>

            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <MatButton Outlined="true" Link="/" Label="На главную" Icon="home" />
        </div>
    }
}


@code {

    [Parameter]
    public int NoteId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    NoteViewModel note;
    List<CssTypeViewModel> cssTypes;
    AppUserViewModel appUser;
    ClaimsPrincipal authUser;
    string authUserId;

    bool dialogIsOpen = false;


    protected override async Task OnInitializedAsync()
    {
        authUser = (await authenticationStateTask).User;
        authUserId = authUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value;
        cssTypes = await HttpClient.GetJsonAsync<List<CssTypeViewModel>>(ApiRoutes.CssType.ALL);
        appUser = await HttpClient.GetJsonAsync<AppUserViewModel>($"{ApiRoutes.Users.USER}/{authUserId}");
    }

    protected override async Task OnParametersSetAsync()
    {
        note = await HttpClient.GetJsonAsync<NoteViewModel>($"{ApiRoutes.Note.SHOW}/{NoteId}");
    }

    async Task UpdateNote()
    {
        note.AppUserViewModel = appUser;
        await HttpClient.PutJsonAsync<NoteViewModel>($"{ApiRoutes.Note.UPDATE}/{note.NoteId}", note);
        NavigationManager.NavigateTo("/");

        Toaster.Add($"Объявление успешно обновлено", MatToastType.Success, "Успех!");
    }

    async Task DeleteNote()
    {
        await HttpClient.DeleteAsync($"{ApiRoutes.Note.DELETE}/{note.NoteId}");
        NavigationManager.NavigateTo("/");

        Toaster.Add($"Новость {note.Title} удалена", MatToastType.Warning, "Внимание!");
    }
}
