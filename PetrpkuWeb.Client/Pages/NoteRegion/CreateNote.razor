@page "/note/create"

@attribute [Authorize(Roles = AuthRoles.ANY)]

@using Newtonsoft.Json

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IMatToaster Toaster


<h2 class="col-12 mb-4 text-center">Новое объявление</h2>

<EditForm Model="NewNote" OnInvalidSubmit="@(() => Toaster.Add("Для публикации необходимо заполнить поля заголовок и текст",MatToastType.Danger,"Ошибка!"))">
    <div class="row">
        <div class="col-12 mb-2">
            <DataAnnotationsValidator />
        </div>

        <div class="form-group col-12 mb-2">
            <label>Тип объявления</label>
            <select class="custom-select" @bind="NewNote.CssTypeViewModel.CssTypeId">
                @if (cssTypes is null)
                {
                    <option selected>(loading...)</option>
                }
                else
                {
                    <option selected>--- Выберите важность ---</option>
                    @foreach (var cssType in cssTypes)
                    {
                        <option value="@cssType.CssTypeId">@cssType.Name</option>
                    }
                }
            </select>
        </div>

        <div class="form-group col-12 mb-2">
            <label>Заголовок</label>
            <input class="form-control" type="text" @bind-value="@NewNote.Title">
            <ValidationMessage For="() => NewNote.Title" />
        </div>

        <div class="form-group col-12 mb-2">
            <label>Текст</label>
            <div class="row">
                <div class="col-6">
                    <textarea class="form-control" rows="15" @bind-value="NewNote.Content" @bind-value:event="oninput"></textarea>
                    <ValidationMessage For="() => NewNote.Content" />
                </div>
            </div>
        </div>

        <div class="form-group col-12 mb-2">
            <MatButton Raised="true" Icon="done" Type="submit" OnClick="AddNote" Label="Опубликовать" Class="float-right" />
        </div>
    </div>
</EditForm>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private NoteViewModel NewNote { get; set; } = new NoteViewModel();

    private List<CssTypeViewModel> cssTypes;
    private AppUserViewModel appUser;

    bool dialogIsOpen = false;


    protected override async Task OnInitializedAsync()
    {
        var authUser = (await authenticationStateTask).User;
        var authUserId = authUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData).Value;
        appUser = await HttpClient.GetJsonAsync<AppUserViewModel>($"{ApiRoutes.Users.USER}/{authUserId}");
        cssTypes = await HttpClient.GetJsonAsync<List<CssTypeViewModel>>(ApiRoutes.CssType.ALL);
    }


    async Task AddNote()
    {
        NewNote.AppUserViewModel = appUser;
        var response = await HttpClient.PostJsonAsync<NoteViewModel>(ApiRoutes.Note.CREATE, NewNote);
        Toaster.Add($"Объявление успешно опубликовано: {response.Title}", MatToastType.Success, "Успех!");
        NavigationManager.NavigateTo("/");
    }
}
